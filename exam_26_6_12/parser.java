
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jun 30 19:59:01 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Fri Jun 30 19:59:01 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\003\007\000\002\004" +
    "\007\000\002\004\007\000\002\004\007\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\005\005\000" +
    "\002\005\004\000\002\006\004\000\002\006\005\000\002" +
    "\007\010\000\002\007\007\000\002\010\006\000\002\010" +
    "\004\000\002\011\002\000\002\011\005\000\002\012\014" +
    "\000\002\013\012\000\002\013\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\006\013\006\014\004\001\002\000\004\007" +
    "\102\001\002\000\006\013\071\014\070\001\002\000\004" +
    "\007\067\001\002\000\004\002\066\001\002\000\004\015" +
    "\011\001\002\000\004\017\014\001\002\000\004\017\014" +
    "\001\002\000\006\015\030\017\014\001\002\000\004\020" +
    "\015\001\002\000\004\020\016\001\002\000\004\005\017" +
    "\001\002\000\006\007\021\021\020\001\002\000\004\017" +
    "\027\001\002\000\006\015\ufff4\017\ufff4\001\002\000\006" +
    "\006\023\007\024\001\002\000\004\021\025\001\002\000" +
    "\006\015\ufff5\017\ufff5\001\002\000\004\017\026\001\002" +
    "\000\006\006\ufff3\007\ufff3\001\002\000\006\006\ufff2\007" +
    "\ufff2\001\002\000\006\002\ufff1\010\ufff1\001\002\000\006" +
    "\015\ufff7\017\ufff7\001\002\000\006\002\000\010\033\001" +
    "\002\000\004\016\036\001\002\000\004\010\033\001\002" +
    "\000\006\002\ufff0\010\ufff0\001\002\000\004\005\037\001" +
    "\002\000\004\022\040\001\002\000\004\005\041\001\002" +
    "\000\004\016\042\001\002\000\004\011\043\001\002\000" +
    "\004\004\044\001\002\000\004\021\045\001\002\000\004" +
    "\005\057\001\002\000\006\006\047\007\050\001\002\000" +
    "\004\021\051\001\002\000\006\002\uffef\010\uffef\001\002" +
    "\000\004\005\052\001\002\000\004\016\053\001\002\000" +
    "\004\005\054\001\002\000\004\017\055\001\002\000\004" +
    "\012\056\001\002\000\006\006\uffee\007\uffee\001\002\000" +
    "\004\016\060\001\002\000\004\005\061\001\002\000\004" +
    "\017\062\001\002\000\004\012\063\001\002\000\006\006" +
    "\uffed\007\uffed\001\002\000\004\017\014\001\002\000\006" +
    "\015\ufff6\017\ufff6\001\002\000\004\002\001\001\002\000" +
    "\010\013\ufff8\014\ufff8\015\ufff8\001\002\000\004\007\073" +
    "\001\002\000\004\007\072\001\002\000\010\013\ufff9\014" +
    "\ufff9\015\ufff9\001\002\000\006\013\006\014\074\001\002" +
    "\000\004\007\100\001\002\000\006\013\071\014\076\001" +
    "\002\000\004\007\077\001\002\000\004\015\ufffc\001\002" +
    "\000\006\013\006\015\uffff\001\002\000\006\013\071\015" +
    "\ufffa\001\002\000\006\013\006\014\103\001\002\000\004" +
    "\007\110\001\002\000\006\013\071\014\105\001\002\000" +
    "\004\007\106\001\002\000\006\013\006\015\ufffe\001\002" +
    "\000\006\013\071\015\ufffb\001\002\000\004\013\006\001" +
    "\002\000\006\013\071\015\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\010\003\006\004\007\005\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\012\007\011\001" +
    "\001\000\004\007\063\001\001\000\004\007\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\021\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\031\001\001\000\002\001\001\000\004\012\033\001" +
    "\001\000\002\001\001\000\004\012\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\074\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\100\001\001\000\002\001\001\000\004" +
    "\005\103\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\106\001\001\000\002\001\001" +
    "\000\004\005\110\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



  // ****** HASHMAP EXAMPLE ****** METHODS: put, get, entrySet
  public HashMap<String, Float> capitals = new HashMap<String, Float>();
  // ****** HASHMAP EXAMPLE ****** METHODS: add, get
  public ArrayList<String> dummy2 = new ArrayList<String>();

  public int getLine() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).left+1;
      }else return -1;
  }
  // Return the column number of actual symbol
  public int getColumn() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).right+1;
      }else return -1;
  }

  public Object stack ( int position){
    // returns the object at the specified position // from the top (tos) of the stack
    return(((Symbol)stack.elementAt(tos+position)).value);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    // print line
    void Pl(String s){
      System.out.println(s);
      return;
    }
    // print
    void P(String s){
      System.out.print(s);
      return;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // advance_l ::= USRCODE CL INT CL FLOAT EURO 
            { parser.Tree.reduce(6,"advance_l",0);
              Object[] RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Integer duration = (Integer)parser.stack(-8);
                                  if(duration < i){
                                    Pl("Error, advance out of time");
                                    RESULT = new Object[2];
                                    RESULT[0] = new String("Nobody");
                                    RESULT[1] = new Float(0.0f);
                                  }
                                  else{
                                    Float capital = parser.capitals.get(u);
                                    if(capital < f){
                                      Pl("Error, available only " + capital + " euro");
                                      RESULT = new Object[2];
                                      RESULT[0] = new String("Nobody");
                                      RESULT[1] = new Float(0.0f);
                                    }
                                    else{
                                      Pl("New auction price: " + f + " euro");
                                      capital = capital - f;
                                      parser.capitals.put(u, capital);
                                      RESULT = new Object[2];
                                      RESULT[0] = new String(u);
                                      RESULT[1] = new Float(f);
                                    }
                                  }
  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*advance_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // advance_l ::= advance_l CM USRCODE CL INT CL FLOAT EURO 
            { parser.Tree.reduce(8,"advance_l",0);
              Object[] RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object[] l = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                  Integer duration = (Integer)parser.stack(-10);
                                  if(duration < i){
                                    Pl("Error, advance out of time");
                                    RESULT = new Object[2];
                                    RESULT = l;
                                  }
                                  else{
                                    Float capital = parser.capitals.get(u);
                                    if(capital < f){
                                      Pl("Error, available only " + capital + " euro");
                                      RESULT = new Object[2];
                                      RESULT = l;
                                    }
                                    else if(f < (Float)l[1]){
                                      Pl("Error, advance less than the current auction value");
                                      RESULT = new Object[2];
                                      RESULT = l;
                                    }
                                    else{
                                      Pl("New auction price: " + f + " euro");
                                      capital = capital - f;
                                      parser.capitals.put(u, capital);
                                      RESULT = new Object[2];
                                      RESULT[0] = new String(u);
                                      RESULT[1] = new Float(f);
                                    }
                                  }

                                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*advance_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // auction ::= AUCTION INT CL PRD CL INT MIN ARROW advance_l S 
            { parser.Tree.reduce(10,"auction",0);
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object[] l = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                  Pl("Winner is " + l[0] + " price " + l[1] + "euro"); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*auction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // auction_l ::= auction_l auction auction 
            { parser.Tree.reduce(3,"auction_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*auction_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // auction_l ::= 
            { parser.Tree.reduce(0,"auction_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*auction_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // user_l ::= USRCODE FLOAT 
            { parser.Tree.reduce(2,"user_l",0);
              Object RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Float res = f * (Float)parser.stack(-5);
                        parser.capitals.put(u, res);
   
              CUP$parser$result = new java_cup.runtime.Symbol(6/*user_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // user_l ::= user_l CM USRCODE FLOAT 
            { parser.Tree.reduce(4,"user_l",0);
              Object RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String u = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float f = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 Float res = f * (Float)parser.stack(-7);
                                          parser.capitals.put(u, res);
                                           
              CUP$parser$result = new java_cup.runtime.Symbol(6/*user_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // currency ::= FLOAT STR STR CL S 
            { parser.Tree.reduce(5,"currency",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*currency*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // currency ::= FLOAT STR STR CL user_l S 
            { parser.Tree.reduce(6,"currency",0);
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  
              CUP$parser$result = new java_cup.runtime.Symbol(5/*currency*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // currency_l ::= currency currency currency 
            { parser.Tree.reduce(3,"currency_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*currency_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // currency_l ::= currency_l currency 
            { parser.Tree.reduce(2,"currency_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*currency_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // hour_l ::= HOUR S 
            { parser.Tree.reduce(2,"hour_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*hour_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // hour_l ::= hour_l HOUR S 
            { parser.Tree.reduce(3,"hour_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*hour_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= hour_l CODE S CODE S hour_l 
            { parser.Tree.reduce(6,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= CODE S hour_l CODE S hour_l 
            { parser.Tree.reduce(6,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= hour_l CODE S hour_l CODE S 
            { parser.Tree.reduce(6,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= CODE S CODE S hour_l 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= CODE S hour_l CODE S 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= hour_l CODE S CODE S 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP currency_l SEP auction_l 
            { parser.Tree.reduce(5,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

