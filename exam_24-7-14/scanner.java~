/* The following code was generated by JFlex 1.4.1 on 04/07/17 11.58 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 04/07/17 11.58 from the specification file
 * <tt>scanner.jflex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int sect2 = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\2\0\1\2\22\0\1\3\1\0\1\57\1\4"+
    "\4\0\1\35\1\36\1\32\1\34\1\41\1\0\1\15\1\31\1\30"+
    "\11\10\1\16\1\33\1\0\1\13\1\0\1\14\1\20\1\46\1\11"+
    "\1\50\1\42\1\51\1\11\2\5\1\43\2\5\1\53\1\5\1\47"+
    "\3\5\1\56\1\44\1\45\1\54\1\52\1\55\3\5\1\37\1\0"+
    "\1\40\1\0\1\17\1\0\2\12\1\23\1\12\1\27\1\12\2\6"+
    "\1\21\3\6\1\25\1\26\1\24\4\6\1\22\3\6\1\7\1\7"+
    "\1\6\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\5\1\1\3\2\1\1\4\1\5"+
    "\1\1\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\5\1\1\15\7\0\1\16\1\0\1\17\1\16\1\20"+
    "\2\16\1\0\1\21\7\0\3\16\6\0\3\16\5\0"+
    "\1\22\1\0\1\16\1\23\1\24\1\25\6\0\1\16"+
    "\5\0\1\16\2\26\1\0\1\27\5\0\1\26\2\0"+
    "\1\26\3\0\1\22\10\0\2\26\4\0\1\26\2\0"+
    "\1\26\24\0\2\26\2\0\2\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\140\0\220\0\300\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\140\0\u01b0\0\u01e0\0\140\0\140\0\u0210"+
    "\0\140\0\140\0\140\0\140\0\140\0\140\0\140\0\u0240"+
    "\0\u0270\0\u02a0\0\u02d0\0\u0300\0\140\0\360\0\u0330\0\u0360"+
    "\0\u0390\0\u03c0\0\u03f0\0\u0420\0\u01b0\0\u01e0\0\u0450\0\u0480"+
    "\0\u01b0\0\u04b0\0\u04e0\0\u0300\0\140\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\u0690\0\u06c0\0\u06f0"+
    "\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870"+
    "\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0\0\u09f0"+
    "\0\u01b0\0\u01b0\0\140\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0"+
    "\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60"+
    "\0\u0c90\0\u0cc0\0\u0cf0\0\u01b0\0\u0d20\0\u0d50\0\u0d80\0\u0db0"+
    "\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0\0\u0f00\0\u0f30"+
    "\0\u0de0\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\u1050\0\u1080"+
    "\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200"+
    "\0\u1230\0\u1260\0\u1290\0\u12c0\0\u12f0\0\u1320\0\u1350\0\u1380"+
    "\0\u13b0\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500"+
    "\0\u1530\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u1650\0\u1680"+
    "\0\u16b0\0\u16e0\0\u1710\0\360\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\3\7\3\10\1\11"+
    "\1\3\1\7\1\3\1\7\1\3\2\7\1\10\3\7"+
    "\2\10\1\12\1\3\1\13\6\3\1\10\3\7\1\10"+
    "\1\7\2\10\5\7\2\3\1\4\1\5\1\4\1\3"+
    "\3\14\1\15\2\14\1\16\2\3\1\17\1\14\1\3"+
    "\7\14\1\20\1\12\1\21\1\13\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\6\14\1\32\2\14"+
    "\1\33\1\14\1\34\61\0\1\4\62\0\1\35\60\0"+
    "\6\36\2\0\1\36\1\0\1\36\1\37\10\36\11\0"+
    "\15\36\6\0\3\36\3\40\2\0\1\36\1\0\1\36"+
    "\1\37\2\36\1\40\3\36\2\40\11\0\1\40\3\36"+
    "\1\40\1\36\2\40\5\36\6\0\1\41\2\42\1\0"+
    "\1\41\1\42\6\0\7\42\12\0\15\41\32\0\1\43"+
    "\1\44\32\0\6\45\4\0\1\45\1\0\10\45\11\0"+
    "\15\45\11\0\1\46\4\0\1\47\12\0\1\46\44\0"+
    "\1\47\47\0\6\45\4\0\1\45\1\0\10\45\11\0"+
    "\1\45\1\50\13\45\6\0\6\45\4\0\1\45\1\0"+
    "\10\45\11\0\5\45\1\51\7\45\6\0\6\45\4\0"+
    "\1\45\1\0\10\45\11\0\4\45\1\52\10\45\6\0"+
    "\6\45\4\0\1\45\1\0\10\45\11\0\14\45\1\53"+
    "\1\0\57\54\1\55\5\0\6\56\6\0\10\56\11\0"+
    "\15\56\6\0\3\36\3\57\2\0\1\60\1\61\1\36"+
    "\1\37\2\36\1\57\3\36\2\57\11\0\1\57\3\36"+
    "\1\57\1\36\2\57\5\36\6\0\1\62\3\0\1\62"+
    "\30\0\15\62\7\0\2\63\2\0\1\63\6\0\7\63"+
    "\30\0\1\43\1\4\1\5\55\43\32\44\1\64\25\44"+
    "\10\0\1\47\17\0\1\47\34\0\6\45\4\0\1\45"+
    "\1\0\10\45\11\0\2\45\1\65\12\45\6\0\6\45"+
    "\4\0\1\45\1\0\10\45\11\0\11\45\1\66\3\45"+
    "\6\0\6\45\4\0\1\45\1\0\10\45\11\0\1\45"+
    "\1\67\13\45\6\0\6\56\2\0\1\70\3\0\10\56"+
    "\11\0\15\56\6\0\3\36\3\71\2\0\1\36\1\0"+
    "\1\36\1\37\2\36\1\71\3\36\2\71\11\0\1\71"+
    "\3\36\1\71\1\36\2\71\5\36\6\0\3\36\3\72"+
    "\2\0\1\36\1\0\1\36\1\37\2\36\1\72\3\36"+
    "\2\72\11\0\1\72\3\36\1\72\1\36\2\72\5\36"+
    "\11\0\3\73\10\0\1\73\3\0\2\73\11\0\1\73"+
    "\3\0\1\73\1\0\2\73\13\0\1\74\3\0\1\74"+
    "\30\0\15\74\7\0\2\75\2\0\1\75\6\0\7\75"+
    "\30\0\31\44\1\4\1\64\25\44\5\0\6\45\4\0"+
    "\1\45\1\0\10\45\11\0\3\45\1\76\11\45\6\0"+
    "\6\45\4\0\1\45\1\0\10\45\11\0\12\45\1\77"+
    "\2\45\6\0\6\45\4\0\1\45\1\0\10\45\11\0"+
    "\3\45\1\100\11\45\22\0\1\101\1\0\1\102\2\0"+
    "\1\103\36\0\6\36\2\0\1\60\1\61\1\36\1\37"+
    "\10\36\11\0\15\36\6\0\3\36\3\104\2\0\1\36"+
    "\1\0\1\36\1\37\2\36\1\104\3\36\2\104\11\0"+
    "\1\104\3\36\1\104\1\36\2\104\5\36\11\0\3\105"+
    "\10\0\1\105\3\0\2\105\11\0\1\105\3\0\1\105"+
    "\1\0\2\105\13\0\1\62\3\0\1\62\2\0\1\106"+
    "\25\0\15\62\7\0\2\107\2\0\1\107\6\0\7\107"+
    "\35\0\6\45\4\0\1\45\1\0\10\45\11\0\4\45"+
    "\1\110\10\45\6\0\6\45\4\0\1\45\1\0\10\45"+
    "\11\0\7\45\1\111\5\45\6\0\6\45\4\0\1\45"+
    "\1\0\10\45\11\0\7\45\1\112\5\45\23\0\1\113"+
    "\61\0\1\114\62\0\1\101\35\0\3\36\3\115\2\0"+
    "\1\116\1\117\1\36\1\37\2\36\1\115\3\36\2\115"+
    "\11\0\1\115\3\36\1\115\1\36\2\115\5\36\11\0"+
    "\3\120\2\0\2\117\4\0\1\120\3\0\2\120\11\0"+
    "\1\120\3\0\1\120\1\0\2\120\15\0\1\121\56\0"+
    "\2\75\2\0\1\75\1\0\1\106\4\0\7\75\35\0"+
    "\6\45\4\0\1\45\1\0\10\45\11\0\5\45\1\122"+
    "\7\45\26\0\1\113\37\0\3\36\3\123\2\0\1\36"+
    "\1\0\1\36\1\37\2\36\1\123\3\36\2\123\11\0"+
    "\1\123\3\36\1\123\1\36\2\123\5\36\6\0\3\36"+
    "\3\124\2\0\1\36\1\0\1\36\1\37\2\36\1\124"+
    "\3\36\2\124\11\0\1\124\3\36\1\124\1\36\2\124"+
    "\5\36\11\0\3\125\10\0\1\125\3\0\2\125\11\0"+
    "\1\125\3\0\1\125\1\0\2\125\16\0\3\126\10\0"+
    "\1\126\3\0\2\126\11\0\1\126\3\0\1\126\1\0"+
    "\2\126\15\0\1\127\55\0\6\45\4\0\1\45\1\0"+
    "\10\45\11\0\6\45\1\130\6\45\6\0\6\36\2\0"+
    "\1\116\1\117\1\36\1\37\10\36\11\0\15\36\6\0"+
    "\3\36\3\131\2\0\1\36\1\0\1\36\1\37\2\36"+
    "\1\131\3\36\2\131\11\0\1\131\3\36\1\131\1\36"+
    "\2\131\5\36\11\0\3\132\10\0\1\132\3\0\2\132"+
    "\11\0\1\132\3\0\1\132\1\0\2\132\23\0\2\117"+
    "\50\0\1\133\55\0\6\45\4\0\1\45\1\0\10\45"+
    "\11\0\7\45\1\134\5\45\6\0\3\36\3\135\2\0"+
    "\1\136\1\137\1\36\1\37\2\36\1\135\3\36\2\135"+
    "\11\0\1\135\3\36\1\135\1\36\2\135\5\36\11\0"+
    "\3\140\2\0\2\137\4\0\1\140\3\0\2\140\11\0"+
    "\1\140\3\0\1\140\1\0\2\140\15\0\1\141\55\0"+
    "\3\36\3\142\2\0\1\36\1\0\1\36\1\37\2\36"+
    "\1\142\3\36\2\142\11\0\1\142\3\36\1\142\1\36"+
    "\2\142\5\36\6\0\3\36\3\143\2\0\1\36\1\0"+
    "\1\36\1\37\2\36\1\143\3\36\2\143\11\0\1\143"+
    "\3\36\1\143\1\36\2\143\5\36\11\0\3\144\10\0"+
    "\1\144\3\0\2\144\11\0\1\144\3\0\1\144\1\0"+
    "\2\144\16\0\3\145\10\0\1\145\3\0\2\145\11\0"+
    "\1\145\3\0\1\145\1\0\2\145\15\0\1\146\55\0"+
    "\6\36\2\0\1\136\1\137\1\36\1\37\10\36\11\0"+
    "\15\36\6\0\3\36\3\147\2\0\1\36\1\0\1\36"+
    "\1\37\2\36\1\147\3\36\2\147\11\0\1\147\3\36"+
    "\1\147\1\36\2\147\5\36\11\0\3\150\10\0\1\150"+
    "\3\0\2\150\11\0\1\150\3\0\1\150\1\0\2\150"+
    "\23\0\2\137\50\0\1\151\55\0\3\36\3\152\2\0"+
    "\1\153\1\154\1\36\1\37\2\36\1\152\3\36\2\152"+
    "\11\0\1\152\3\36\1\152\1\36\2\152\5\36\11\0"+
    "\3\155\2\0\2\154\4\0\1\155\3\0\2\155\11\0"+
    "\1\155\3\0\1\155\1\0\2\155\13\0\3\36\3\156"+
    "\2\0\1\36\1\0\1\36\1\37\2\36\1\156\3\36"+
    "\2\156\11\0\1\156\3\36\1\156\1\36\2\156\5\36"+
    "\6\0\3\36\3\157\2\0\1\36\1\0\1\36\1\37"+
    "\2\36\1\157\3\36\2\157\11\0\1\157\3\36\1\157"+
    "\1\36\2\157\5\36\11\0\3\160\10\0\1\160\3\0"+
    "\2\160\11\0\1\160\3\0\1\160\1\0\2\160\16\0"+
    "\3\161\10\0\1\161\3\0\2\161\11\0\1\161\3\0"+
    "\1\161\1\0\2\161\13\0\6\36\2\0\1\153\1\154"+
    "\1\36\1\37\10\36\11\0\15\36\6\0\3\36\3\162"+
    "\2\0\1\36\1\0\1\36\1\37\2\36\1\162\3\36"+
    "\2\162\11\0\1\162\3\36\1\162\1\36\2\162\5\36"+
    "\11\0\3\163\10\0\1\163\3\0\2\163\11\0\1\163"+
    "\3\0\1\163\1\0\2\163\23\0\2\154\46\0\3\36"+
    "\3\164\2\0\1\165\1\166\1\36\1\37\2\36\1\164"+
    "\3\36\2\164\11\0\1\164\3\36\1\164\1\36\2\164"+
    "\5\36\11\0\3\167\2\0\2\166\4\0\1\167\3\0"+
    "\2\167\11\0\1\167\3\0\1\167\1\0\2\167\13\0"+
    "\3\36\3\170\2\0\1\36\1\0\1\36\1\37\2\36"+
    "\1\170\3\36\2\170\11\0\1\170\3\36\1\170\1\36"+
    "\2\170\5\36\6\0\3\36\3\171\2\0\1\36\1\0"+
    "\1\36\1\37\2\36\1\171\3\36\2\171\11\0\1\171"+
    "\3\36\1\171\1\36\2\171\5\36\11\0\3\172\10\0"+
    "\1\172\3\0\2\172\11\0\1\172\3\0\1\172\1\0"+
    "\2\172\16\0\3\173\10\0\1\173\3\0\2\173\11\0"+
    "\1\173\3\0\1\173\1\0\2\173\13\0\6\36\2\0"+
    "\1\165\1\166\1\36\1\37\10\36\11\0\15\36\6\0"+
    "\3\36\3\174\2\0\1\36\1\0\1\36\1\37\2\36"+
    "\1\174\3\36\2\174\11\0\1\174\3\36\1\174\1\36"+
    "\2\174\5\36\11\0\3\175\10\0\1\175\3\0\2\175"+
    "\11\0\1\175\3\0\1\175\1\0\2\175\23\0\2\166"+
    "\46\0\3\36\3\176\2\0\1\177\1\200\1\36\1\37"+
    "\2\36\1\176\3\36\2\176\11\0\1\176\3\36\1\176"+
    "\1\36\2\176\5\36\11\0\3\201\2\0\2\200\4\0"+
    "\1\201\3\0\2\201\11\0\1\201\3\0\1\201\1\0"+
    "\2\201\13\0\3\36\3\202\2\0\1\36\1\0\1\36"+
    "\1\37\2\36\1\202\3\36\2\202\11\0\1\202\3\36"+
    "\1\202\1\36\2\202\5\36\6\0\3\36\3\203\2\0"+
    "\1\36\1\0\1\36\1\37\2\36\1\203\3\36\2\203"+
    "\11\0\1\203\3\36\1\203\1\36\2\203\5\36\11\0"+
    "\3\204\10\0\1\204\3\0\2\204\11\0\1\204\3\0"+
    "\1\204\1\0\2\204\16\0\3\205\10\0\1\205\3\0"+
    "\2\205\11\0\1\205\3\0\1\205\1\0\2\205\13\0"+
    "\6\36\2\0\1\177\1\200\1\36\1\37\10\36\11\0"+
    "\15\36\6\0\3\36\3\206\2\0\1\36\1\0\1\36"+
    "\1\37\2\36\1\206\3\36\2\206\11\0\1\206\3\36"+
    "\1\206\1\36\2\206\5\36\11\0\3\207\10\0\1\207"+
    "\3\0\2\207\11\0\1\207\3\0\1\207\1\0\2\207"+
    "\23\0\2\200\46\0\3\36\3\210\2\0\1\211\1\212"+
    "\1\36\1\37\2\36\1\210\3\36\2\210\11\0\1\210"+
    "\3\36\1\210\1\36\2\210\5\36\11\0\3\213\2\0"+
    "\2\212\4\0\1\213\3\0\2\213\11\0\1\213\3\0"+
    "\1\213\1\0\2\213\13\0\3\36\3\214\2\0\1\36"+
    "\1\0\1\36\1\37\2\36\1\214\3\36\2\214\11\0"+
    "\1\214\3\36\1\214\1\36\2\214\5\36\6\0\3\36"+
    "\3\215\2\0\1\36\1\0\1\36\1\37\2\36\1\215"+
    "\3\36\2\215\11\0\1\215\3\36\1\215\1\36\2\215"+
    "\5\36\11\0\3\216\10\0\1\216\3\0\2\216\11\0"+
    "\1\216\3\0\1\216\1\0\2\216\16\0\3\217\10\0"+
    "\1\217\3\0\2\217\11\0\1\217\3\0\1\217\1\0"+
    "\2\217\13\0\6\36\2\0\1\211\1\212\1\36\1\37"+
    "\10\36\11\0\15\36\6\0\3\36\3\220\2\0\1\36"+
    "\1\0\1\36\1\37\2\36\1\220\3\36\2\220\11\0"+
    "\1\220\3\36\1\220\1\36\2\220\5\36\11\0\3\221"+
    "\10\0\1\221\3\0\2\221\11\0\1\221\3\0\1\221"+
    "\1\0\2\221\23\0\2\212\46\0\3\36\3\222\2\0"+
    "\1\36\1\0\1\36\1\37\2\36\1\222\3\36\2\222"+
    "\11\0\1\222\3\36\1\222\1\36\2\222\5\36\11\0"+
    "\3\223\10\0\1\223\3\0\2\223\11\0\1\223\3\0"+
    "\1\223\1\0\2\223\13\0\3\36\3\224\2\0\1\36"+
    "\1\0\1\36\1\37\2\36\1\224\3\36\2\224\11\0"+
    "\1\224\3\36\1\224\1\36\2\224\5\36\11\0\3\225"+
    "\10\0\1\225\3\0\2\225\11\0\1\225\3\0\1\225"+
    "\1\0\2\225\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5952];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\6\1\1\11\2\1\2\11\1\1\7\11"+
    "\5\1\1\11\7\0\1\1\1\0\5\1\1\0\1\11"+
    "\7\0\3\1\6\0\3\1\5\0\1\1\1\0\3\1"+
    "\1\11\6\0\1\1\5\0\3\1\1\0\1\1\5\0"+
    "\1\1\2\0\1\1\3\0\1\1\10\0\2\1\4\0"+
    "\1\1\2\0\1\1\24\0\2\1\2\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private static final boolean _DEBUG = false;

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);

  }
  private Symbol plrs(int type, String message){
    if(_DEBUG){
      System.out.println(message + " " + yytext());
    }
    return symbol(type);
  }
  private Symbol plrs(int type, Object value, String message){
    if(_DEBUG){
      System.out.println(message + " " + yytext());
    }
    return symbol(type, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return plrs(sym.TK1, "TK1");
          }
        case 24: break;
        case 4: 
          { return plrs(sym.EQ, "EQ");
          }
        case 25: break;
        case 9: 
          { return plrs(sym.RC, "RC");
          }
        case 26: break;
        case 8: 
          { return plrs(sym.RO, "RO");
          }
        case 27: break;
        case 21: 
          { return plrs(sym.EMAIL, "EMAIL");
          }
        case 28: break;
        case 20: 
          { return plrs(sym.WR, "WR");
          }
        case 29: break;
        case 10: 
          { return plrs(sym.SO, "SO");
          }
        case 30: break;
        case 15: 
          { return plrs(sym.DOUBLE, new Double(yytext()), "DOUBLE");
          }
        case 31: break;
        case 19: 
          { return plrs(sym.VL, "VL");
          }
        case 32: break;
        case 5: 
          { return plrs(sym.CL, "CL");
          }
        case 33: break;
        case 14: 
          { return plrs(sym.VAR, new String(yytext()), "VAR");
          }
        case 34: break;
        case 6: 
          { return plrs(sym.STAR, "STAR");
          }
        case 35: break;
        case 12: 
          { return plrs(sym.CM, "CM");
          }
        case 36: break;
        case 22: 
          { return plrs(sym.TK2, "TK2");
          }
        case 37: break;
        case 11: 
          { return plrs(sym.SC, "SC");
          }
        case 38: break;
        case 2: 
          { ;
          }
        case 39: break;
        case 7: 
          { return plrs(sym.PLUS, "PLUS");
          }
        case 40: break;
        case 17: 
          { return plrs(sym.QUOT, new String(yytext()), "QUOT");
          }
        case 41: break;
        case 3: 
          { return plrs(sym.S, "S");
          }
        case 42: break;
        case 23: 
          { return plrs(sym.DST, "DST");
          }
        case 43: break;
        case 16: 
          { return plrs(sym.IN, "IN");
          }
        case 44: break;
        case 1: 
          { System.out.println("SCANNER ERROR: " + yytext());
          }
        case 45: break;
        case 13: 
          { yybegin(sect2); return plrs(sym.SEP, "SEP");
          }
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        scanner scanner = null;
        try {
          scanner = new scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
