
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jul 04 11:58:50 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.io.*;
import java.lang.Math.*;

/** CUP v0.10k generated parser.
  * @version Tue Jul 04 11:58:50 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\003\005\000\002\006" +
    "\002\000\002\006\005\000\002\007\003\000\002\007\003" +
    "\000\002\004\011\000\002\004\011\000\002\005\002\000" +
    "\002\005\005\000\002\010\006\000\002\016\006\000\002" +
    "\020\011\000\002\020\007\000\002\011\006\000\002\012" +
    "\006\000\002\012\004\000\002\014\002\000\002\015\002" +
    "\000\002\013\012\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\003\000\002\017\003\000\002" +
    "\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\010\016\ufff9\017\ufff9\020\ufff9\001\002\000" +
    "\010\016\076\017\075\020\074\001\002\000\004\002\073" +
    "\001\002\000\004\025\007\001\002\000\010\002\uffff\022" +
    "\uffff\030\uffff\001\002\000\010\002\000\022\014\030\012" +
    "\001\002\000\006\022\014\030\012\001\002\000\004\015" +
    "\067\001\002\000\010\002\ufffd\022\ufffd\030\ufffd\001\002" +
    "\000\012\007\020\021\021\027\017\030\016\001\002\000" +
    "\010\002\ufffc\022\ufffc\030\ufffc\001\002\000\022\004\uffea" +
    "\005\uffea\006\uffea\010\uffea\012\uffea\013\uffea\014\uffea\023" +
    "\uffea\001\002\000\022\004\uffe9\005\uffe9\006\uffe9\010\uffe9" +
    "\012\uffe9\013\uffe9\014\uffe9\023\uffe9\001\002\000\012\007" +
    "\020\021\021\027\017\030\016\001\002\000\004\007\047" +
    "\001\002\000\010\013\025\014\024\023\uffef\001\002\000" +
    "\022\004\uffe8\005\uffe8\006\uffe8\010\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\023\uffe8\001\002\000\012\007\020\021\021\027" +
    "\017\030\016\001\002\000\012\007\020\021\021\027\017" +
    "\030\016\001\002\000\004\023\033\001\002\000\006\005" +
    "\030\006\031\001\002\000\004\023\ufff0\001\002\000\010" +
    "\002\ufff3\022\ufff3\030\ufff3\001\002\000\004\023\033\001" +
    "\002\000\004\011\035\001\002\000\006\005\ufff2\006\ufff2" +
    "\001\002\000\012\007\020\021\021\027\017\030\016\001" +
    "\002\000\010\004\037\013\025\014\024\001\002\000\012" +
    "\007\020\021\021\027\017\030\016\001\002\000\010\012" +
    "\041\013\025\014\024\001\002\000\004\024\042\001\002" +
    "\000\004\031\043\001\002\000\006\005\uffee\006\uffee\001" +
    "\002\000\006\005\ufff1\006\ufff1\001\002\000\022\004\uffed" +
    "\005\uffed\006\uffed\010\uffed\012\uffed\013\uffed\014\024\023" +
    "\uffed\001\002\000\022\004\uffec\005\uffec\006\uffec\010\uffec" +
    "\012\uffec\013\uffec\014\uffec\023\uffec\001\002\000\004\011" +
    "\051\001\002\000\006\005\056\010\057\001\002\000\012" +
    "\007\020\021\021\027\017\030\016\001\002\000\010\005" +
    "\053\013\025\014\024\001\002\000\012\007\020\021\021" +
    "\027\017\030\016\001\002\000\010\012\055\013\025\014" +
    "\024\001\002\000\006\005\ufff4\010\ufff4\001\002\000\004" +
    "\011\060\001\002\000\022\004\ufff6\005\ufff6\006\ufff6\010" +
    "\ufff6\012\ufff6\013\ufff6\014\ufff6\023\ufff6\001\002\000\012" +
    "\007\020\021\021\027\017\030\016\001\002\000\010\005" +
    "\062\013\025\014\024\001\002\000\012\007\020\021\021" +
    "\027\017\030\016\001\002\000\010\012\064\013\025\014" +
    "\024\001\002\000\006\005\ufff5\010\ufff5\001\002\000\010" +
    "\010\066\013\025\014\024\001\002\000\022\004\uffeb\005" +
    "\uffeb\006\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\023\uffeb" +
    "\001\002\000\012\007\020\021\021\027\017\030\016\001" +
    "\002\000\010\006\071\013\025\014\024\001\002\000\010" +
    "\002\ufff7\022\ufff7\030\ufff7\001\002\000\010\002\ufffe\022" +
    "\ufffe\030\ufffe\001\002\000\004\002\001\001\002\000\004" +
    "\006\105\001\002\000\004\006\100\001\002\000\004\006" +
    "\077\001\002\000\012\016\ufff8\017\ufff8\020\ufff8\025\ufff8" +
    "\001\002\000\006\016\ufff9\020\ufff9\001\002\000\006\016" +
    "\076\020\102\001\002\000\004\006\103\001\002\000\006" +
    "\016\ufff9\025\ufff9\001\002\000\006\016\076\025\ufffa\001" +
    "\002\000\006\016\ufff9\017\ufff9\001\002\000\006\016\076" +
    "\017\107\001\002\000\004\006\110\001\002\000\006\016" +
    "\ufff9\025\ufff9\001\002\000\006\016\076\025\ufffb\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\107\000\010\003\004\004\005\005\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\007\001\001\000\010\007\010\010\012\011\014\001" +
    "\001\000\010\007\071\010\012\011\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\022\017\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\022\017\064\001\001\000\002\001\001\000" +
    "\006\012\026\015\025\001\001\000\002\001\001\000\006" +
    "\016\022\017\045\001\001\000\006\016\022\017\044\001" +
    "\001\000\004\013\043\001\001\000\002\001\001\000\004" +
    "\014\031\001\001\000\002\001\001\000\004\013\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\022" +
    "\017\035\001\001\000\002\001\001\000\006\016\022\017" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\047\001\001\000\002" +
    "\001\001\000\006\016\022\017\051\001\001\000\002\001" +
    "\001\000\006\016\022\017\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\016\022\017\060\001\001\000\002\001\001\000\006" +
    "\016\022\017\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\022" +
    "\017\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\103\001\001\000\002\001\001\000\004\005\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\110" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



  // ****** HASHMAP EXAMPLE ****** METHODS: put, get, entrySet
  public HashMap<String, Double> stable = new HashMap<String, Double>();
  // ****** HASHMAP EXAMPLE ****** METHODS: add, get
  public ArrayList<String> dummy2 = new ArrayList<String>();

  public int getLine() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).left+1;
      }else return -1;
  }
  // Return the column number of actual symbol
  public int getColumn() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).right+1;
      }else return -1;
  }

  public Object stack ( int position){
    // returns the object at the specified position // from the top (tos) of the stack
    return(((Symbol)stack.elementAt(tos+position)).value);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    // print line
    void Pl(String s){
      System.out.println(s);
      return;
    }
    // print
    void P(String s){
      System.out.print(s);
      return;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= distance 
            { parser.Tree.reduce(1,"exp",0);
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= DOUBLE 
            { parser.Tree.reduce(1,"exp",0);
              Double RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = d; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= VAR 
            { parser.Tree.reduce(1,"exp",0);
              Double RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.stable.get(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= RO exp RC 
            { parser.Tree.reduce(3,"exp",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp STAR exp 
            { parser.Tree.reduce(3,"exp",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a * b; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= exp PLUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Double RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a + b; 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // interval ::= IN SO exp CL exp SC WR QUOT 
            { parser.Tree.reduce(8,"interval",0);
              Object RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                            Double cmp;
                            cmp = (Double)parser.stack(-8);
                            if((a <= cmp) && (b >= cmp))
                              Pl(q);
  
              CUP$parser$result = new java_cup.runtime.Symbol(9/*interval*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Double RESULT = null;
		
          RESULT = (Double)parser.stack(0);
          //Pl(RESULT.toString());
          
              CUP$parser$result = new java_cup.runtime.Symbol(11/*NT1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Double RESULT = null;
		
          RESULT = (Double)parser.stack(-2);
          //Pl(RESULT.toString());
          
              CUP$parser$result = new java_cup.runtime.Symbol(10/*NT0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // interval_l ::= NT1 interval 
            { parser.Tree.reduce(2,"interval_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*interval_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // interval_l ::= interval_l CM NT0 interval 
            { parser.Tree.reduce(4,"interval_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*interval_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // value ::= VL exp interval_l S 
            { parser.Tree.reduce(4,"value",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*value*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // point_l ::= SO exp CM exp SC 
            { parser.Tree.reduce(5,"point_l",0);
              Double[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new Double[3];
                                RESULT[0] = a;
                                RESULT[1] = b;
                                RESULT[2] = 0.0;
                                //Pl("A " + a.toString() + " B " + b.toString());
                                //Pl(Arrays.toString(RESULT));
                            
              CUP$parser$result = new java_cup.runtime.Symbol(14/*point_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // point_l ::= point_l CM SO exp CM exp SC 
            { parser.Tree.reduce(7,"point_l",0);
              Double[] RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double[] l = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                            //Pl("A " + a.toString() + " B " + b.toString());
                            //Pl("C " + l[0].toString() + " D " + l[1].toString());
                            Double v1;
                            v1 = a - l[0];
                            v1 = Math.pow(v1, 2);
                            Double v2;
                            v2 = b - l[1];
                            v2 = Math.pow(v2, 2);
                            RESULT = new Double[3];
                            RESULT[0] = a;
                            RESULT[1] = b;
                            RESULT[2] = l[2] + Math.sqrt(v1 + v2);
                            //Pl(Arrays.toString(RESULT));
                            
              CUP$parser$result = new java_cup.runtime.Symbol(14/*point_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // distance ::= DST RO point_l RC 
            { parser.Tree.reduce(4,"distance",0);
              Double RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] l = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l[2]; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*distance*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var_ass ::= VAR EQ exp S 
            { parser.Tree.reduce(4,"var_ass",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
              parser.stable.put(v, e);
              //Pl(v + " = " + e.toString());
  
              CUP$parser$result = new java_cup.runtime.Symbol(6/*var_ass*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tk1_l ::= tk1_l TK1 S 
            { parser.Tree.reduce(3,"tk1_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*tk1_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tk1_l ::= 
            { parser.Tree.reduce(0,"tk1_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*tk1_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= tk1_l TK2 S tk1_l EMAIL S tk1_l 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= tk1_l EMAIL S tk1_l TK2 S tk1_l 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruction ::= value 
            { parser.Tree.reduce(1,"instruction",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruction ::= var_ass 
            { parser.Tree.reduce(1,"instruction",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instruction_l ::= instruction_l instruction instruction 
            { parser.Tree.reduce(3,"instruction_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*instruction_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instruction_l ::= 
            { parser.Tree.reduce(0,"instruction_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*instruction_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP instruction_l 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

