import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.io.*;
import java.lang.Math.*;

parser code {:

  // ****** HASHMAP EXAMPLE ****** METHODS: put, get, entrySet
  public HashMap<String, HashMap<String, Integer>> dummy = new HashMap<String, HashMap<String, Integer>>();
  // ****** HASHMAP EXAMPLE ****** METHODS: add, get
  public ArrayList<String> dummy2 = new ArrayList<String>();

  public int getLine() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).left+1;
      }else return -1;
  }
  // Return the column number of actual symbol
  public int getColumn() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).right+1;
      }else return -1;
  }

  public Object stack ( int position){
    // returns the object at the specified position // from the top (tos) of the stack
    return(((Symbol)stack.elementAt(tos+position)).value);
  }
:};

action code {:
    // print line
    void Pl(String s){
      System.out.println(s);
      return;
    }
    // print
    void P(String s){
      System.out.print(s);
      return;
    }
:}

terminal ARROW, CL, CM, S, DT;
terminal RO, RC, SO, SC, BO, BC;
terminal PLUS, MINUS, STAR, DIV, EXP;
terminal EQ, MIN, MAJ, MIN_EQ, EQ_MIN, MAJ_EQ, EQ_MAJ;
terminal AND, OR, NOT;
terminal QM, PRC, DLR, INC, DEC;

non terminal prog;

/* precedence template
// Precedences and associativities
// lower precedences
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left EQUAL;
precedence left PLUS, MINUS;
precedence left UMINUS;
// higher precedences
*/

start with prog;



prog ::= ;


/* expression template
exp ::=
    exp:x AND exp:y  {: RESULT = (x && y); :}
    | exp:x OR exp:y {: RESULT = (x || y);  :}
    | NOT exp:x      {: RESULT = !x; :}
    | RO exp:x RC     {: RESULT = x; :}
    | exp_int:x EQUAL exp_int:y {: RESULT = x.equals(y); :}

;

exp_int ::= MINUS INT:i {: RESULT = -i; :}
          | PLUS INT:i {: RESULT = i; :}
          | INT:i {: RESULT = i; :}
          | NAME:n DT ATT:a {:
                HashMap<String,Integer> tb = parser.table.get(n);
            RESULT = tb.get(a); :} %prec UMINUS
;
*/
