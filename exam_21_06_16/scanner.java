/* The following code was generated by JFlex 1.4.1 on 04/07/17 18.59 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 04/07/17 18.59 from the specification file
 * <tt>scanner.jflex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int sect2 = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\2\0\1\2\22\0\1\3\1\50\1\73\1\41"+
    "\2\0\1\47\1\0\1\51\1\52\1\44\1\31\1\45\1\7\1\30"+
    "\1\43\1\22\1\13\1\12\1\10\1\25\1\21\1\26\1\27\1\16"+
    "\1\15\1\24\1\42\1\0\1\46\3\0\1\35\1\36\1\34\1\60"+
    "\1\61\1\33\1\32\1\65\1\55\2\32\1\63\1\32\1\56\1\66"+
    "\1\71\1\32\1\72\1\67\1\57\1\62\1\32\1\64\1\70\2\32"+
    "\1\53\1\0\1\54\1\0\1\37\1\0\1\17\1\20\1\14\1\11"+
    "\1\14\1\11\21\40\1\4\1\5\1\6\1\0\1\23\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\4\1\1\3\1\1\1\4\1\5"+
    "\1\6\1\1\1\7\1\10\2\11\1\1\1\12\1\13"+
    "\1\1\1\14\1\15\1\16\1\17\1\20\5\11\1\1"+
    "\6\0\1\21\2\0\1\22\1\11\1\23\1\24\1\25"+
    "\3\11\1\26\2\11\1\0\1\27\6\0\7\11\6\0"+
    "\1\30\1\31\1\32\1\11\1\33\1\34\1\11\6\0"+
    "\1\11\1\35\6\0\1\11\1\0\1\36\5\0\1\37"+
    "\1\0\2\36\3\0\1\40\3\0\2\36\25\0\1\41"+
    "\37\0\1\41\16\0\1\41\13\0\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\170\0\264\0\360\0\u012c\0\u0168"+
    "\0\u01a4\0\170\0\u01e0\0\u021c\0\170\0\u0258\0\u0294\0\170"+
    "\0\170\0\u02d0\0\u030c\0\u0348\0\170\0\u0384\0\u03c0\0\170"+
    "\0\170\0\170\0\170\0\170\0\u03fc\0\u0438\0\u0474\0\u04b0"+
    "\0\u04ec\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\170\0\u06cc\0\u0708\0\170\0\u0744\0\170\0\170\0\170"+
    "\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u0528\0\170"+
    "\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c"+
    "\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c"+
    "\0\u0ca8\0\u0ce4\0\u0d20\0\u02d0\0\u02d0\0\u02d0\0\u0d5c\0\u02d0"+
    "\0\u02d0\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u02d0\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284"+
    "\0\u02d0\0\u12c0\0\u12fc\0\u1338\0\u12fc\0\u1338\0\u1374\0\170"+
    "\0\u13b0\0\u13ec\0\u1428\0\170\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8"+
    "\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u189c\0\u18d8"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238"+
    "\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc\0\u2418"+
    "\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc\0\u25f8"+
    "\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\3\6\4\3\1\7\6\3"+
    "\1\10\16\3\1\11\1\12\1\13\31\3\1\4\1\5"+
    "\1\4\3\14\1\15\1\16\1\14\2\16\1\14\2\16"+
    "\2\14\2\16\1\17\1\3\3\16\1\20\1\21\2\22"+
    "\1\23\2\22\1\3\1\14\1\24\1\12\1\13\1\3"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\22\1\37\3\22\1\40\4\22\1\41"+
    "\1\22\1\42\75\0\1\4\76\0\3\43\75\0\1\44"+
    "\1\0\1\44\1\45\5\0\1\46\1\47\2\0\1\44"+
    "\61\0\1\50\6\0\1\50\112\0\1\51\75\0\1\52"+
    "\1\53\33\0\3\14\2\0\1\14\2\0\1\14\2\0"+
    "\2\14\17\0\1\14\43\0\1\16\1\0\2\16\1\0"+
    "\2\16\2\0\1\16\3\0\3\16\67\0\1\54\60\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\6\22\15\0\16\22\11\0\1\22\1\0"+
    "\2\22\1\0\2\22\2\0\2\22\2\0\3\22\2\0"+
    "\3\22\1\55\2\22\15\0\16\22\42\0\1\56\100\0"+
    "\1\57\74\0\1\60\34\0\1\22\1\0\2\22\1\0"+
    "\2\22\2\0\2\22\2\0\3\22\2\0\6\22\15\0"+
    "\1\22\1\61\14\22\11\0\1\22\1\0\2\22\1\0"+
    "\2\22\2\0\2\22\2\0\3\22\2\0\6\22\15\0"+
    "\4\22\1\62\11\22\11\0\1\22\1\0\2\22\1\0"+
    "\2\22\2\0\2\22\2\0\3\22\2\0\6\22\15\0"+
    "\4\22\1\63\4\22\1\64\4\22\11\0\1\22\1\0"+
    "\2\22\1\0\2\22\2\0\2\22\2\0\3\22\2\0"+
    "\6\22\15\0\10\22\1\65\5\22\11\0\1\22\1\0"+
    "\2\22\1\0\2\22\2\0\2\22\2\0\3\22\2\0"+
    "\6\22\15\0\15\22\1\66\1\0\73\67\1\70\4\0"+
    "\3\71\111\0\1\72\62\0\1\73\6\0\1\73\1\0"+
    "\1\72\73\0\1\74\62\0\1\73\6\0\1\73\1\0"+
    "\1\75\62\0\1\73\6\0\1\73\51\0\1\52\1\4"+
    "\1\5\71\52\44\53\1\76\27\53\10\0\1\22\1\0"+
    "\2\22\1\0\2\22\2\0\2\22\2\0\3\22\2\0"+
    "\6\22\15\0\12\22\1\77\3\22\11\0\1\22\1\0"+
    "\2\22\1\0\2\22\2\0\2\22\2\0\3\22\2\0"+
    "\6\22\15\0\1\100\15\22\11\0\1\22\1\0\2\22"+
    "\1\0\2\22\2\0\2\22\2\0\3\22\2\0\6\22"+
    "\15\0\13\22\1\101\2\22\11\0\1\22\1\0\2\22"+
    "\1\0\2\22\2\0\2\22\2\0\3\22\2\0\1\22"+
    "\1\102\4\22\15\0\16\22\11\0\1\22\1\0\2\22"+
    "\1\0\2\22\2\0\2\22\2\0\3\22\2\0\6\22"+
    "\15\0\1\22\1\103\14\22\11\0\1\22\1\0\2\22"+
    "\1\0\2\22\2\0\2\22\2\0\3\22\2\0\6\22"+
    "\15\0\4\22\1\104\11\22\11\0\1\22\1\0\2\22"+
    "\1\0\2\22\2\0\2\22\2\0\3\22\2\0\6\22"+
    "\15\0\1\105\15\22\5\0\3\106\75\0\1\107\1\0"+
    "\2\107\5\0\2\107\2\0\1\107\55\0\1\110\3\0"+
    "\1\111\6\0\1\111\5\0\2\110\52\0\1\112\1\0"+
    "\2\107\70\0\1\107\1\0\1\107\1\113\5\0\1\107"+
    "\3\0\1\107\46\0\43\53\1\4\1\76\27\53\10\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\6\22\15\0\4\22\1\114\11\22\11\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\6\22\15\0\2\22\1\115\13\22\11\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\6\22\15\0\2\22\1\116\13\22\11\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\3\22\1\117\2\22\15\0\16\22\11\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\6\22\15\0\4\22\1\120\11\22\11\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\6\22\15\0\1\22\1\121\14\22\11\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\6\22\15\0\1\22\1\122\14\22\5\0"+
    "\3\123\75\0\1\124\1\0\2\124\1\0\2\124\2\0"+
    "\2\124\2\0\3\124\57\0\1\125\6\0\1\125\64\0"+
    "\1\126\6\0\1\126\61\0\1\124\1\0\2\124\5\0"+
    "\2\124\2\0\1\124\1\127\55\0\1\124\1\0\1\124"+
    "\1\130\1\0\2\124\2\0\1\124\3\0\3\124\54\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\6\22\15\0\5\22\1\131\10\22\11\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\6\22\15\0\2\22\1\132\13\22\5\0"+
    "\3\133\111\0\1\134\62\0\1\135\6\0\1\135\64\0"+
    "\1\136\6\0\1\136\75\0\1\137\73\0\1\140\57\0"+
    "\1\22\1\0\2\22\1\0\2\22\2\0\2\22\2\0"+
    "\3\22\2\0\6\22\15\0\6\22\1\141\7\22\5\0"+
    "\1\142\2\123\14\0\1\143\60\0\1\144\1\0\2\144"+
    "\5\0\2\144\2\0\1\144\61\0\1\145\6\0\1\145"+
    "\64\0\1\146\6\0\1\146\61\0\1\144\1\0\2\144"+
    "\6\0\1\144\2\0\1\147\56\0\1\144\1\0\1\144"+
    "\1\150\5\0\1\144\3\0\1\144\56\0\1\22\1\0"+
    "\2\22\1\0\2\22\2\0\2\22\2\0\3\22\2\0"+
    "\6\22\15\0\2\22\1\151\13\22\5\0\1\133\1\0"+
    "\1\133\74\0\1\152\1\153\1\154\1\155\1\153\1\156"+
    "\1\153\1\155\1\157\1\154\1\153\3\0\2\155\1\153"+
    "\3\0\1\154\1\156\1\157\1\154\21\0\1\154\1\156"+
    "\22\0\1\160\1\0\2\160\1\0\2\160\2\0\2\160"+
    "\2\0\3\160\53\0\1\161\3\0\1\162\6\0\1\162"+
    "\5\0\2\161\55\0\1\163\6\0\1\163\61\0\1\160"+
    "\1\0\2\160\5\0\2\160\2\0\3\160\54\0\1\160"+
    "\1\0\1\160\2\0\2\160\2\0\1\160\3\0\3\160"+
    "\54\0\1\154\1\164\1\156\1\154\1\0\1\164\2\0"+
    "\2\164\5\0\1\164\3\0\1\164\2\0\1\164\21\0"+
    "\1\164\23\0\2\154\1\156\1\154\1\156\1\154\2\156"+
    "\2\154\3\0\2\156\1\154\3\0\1\154\2\156\1\154"+
    "\21\0\1\154\1\156\22\0\2\164\1\0\1\164\1\0"+
    "\1\164\2\0\2\164\5\0\1\164\3\0\1\164\2\0"+
    "\1\164\21\0\1\164\23\0\1\154\1\164\1\0\1\154"+
    "\1\0\1\154\1\0\1\156\1\165\1\154\5\0\1\154"+
    "\3\0\1\164\1\0\1\156\1\165\21\0\1\164\26\0"+
    "\1\166\6\0\1\166\64\0\1\167\6\0\1\167\64\0"+
    "\1\170\6\0\1\170\61\0\1\164\2\0\1\164\5\0"+
    "\1\164\65\0\1\171\6\0\1\171\64\0\1\172\6\0"+
    "\1\172\64\0\1\173\6\0\1\173\64\0\1\174\6\0"+
    "\1\174\64\0\1\175\6\0\1\175\64\0\1\176\6\0"+
    "\1\176\60\0\1\177\3\0\1\200\6\0\1\200\5\0"+
    "\2\177\55\0\1\201\6\0\1\201\64\0\1\202\6\0"+
    "\1\202\64\0\1\203\6\0\1\203\64\0\1\204\6\0"+
    "\1\204\64\0\1\205\6\0\1\205\64\0\1\206\6\0"+
    "\1\206\64\0\1\207\6\0\1\207\64\0\1\210\6\0"+
    "\1\210\64\0\1\211\6\0\1\211\64\0\1\212\6\0"+
    "\1\212\64\0\1\213\6\0\1\213\64\0\1\214\6\0"+
    "\1\214\64\0\1\215\6\0\1\215\64\0\1\216\6\0"+
    "\1\216\60\0\1\217\3\0\1\220\6\0\1\220\5\0"+
    "\2\217\55\0\1\221\6\0\1\221\64\0\1\222\6\0"+
    "\1\222\60\0\1\110\20\0\2\110\55\0\1\223\6\0"+
    "\1\223\64\0\1\224\6\0\1\224\64\0\1\225\6\0"+
    "\1\225\64\0\1\226\6\0\1\226\64\0\1\227\6\0"+
    "\1\227\64\0\1\230\6\0\1\230\64\0\1\231\6\0"+
    "\1\231\64\0\1\232\6\0\1\232\64\0\1\233\6\0"+
    "\1\233\64\0\1\234\6\0\1\234\64\0\1\235\6\0"+
    "\1\235\64\0\1\236\6\0\1\236\60\0\1\237\3\0"+
    "\1\240\6\0\1\240\5\0\2\237\55\0\1\241\6\0"+
    "\1\241\64\0\1\242\6\0\1\242\60\0\1\161\20\0"+
    "\2\161\55\0\1\243\6\0\1\243\64\0\1\244\6\0"+
    "\1\244\64\0\1\245\6\0\1\245\64\0\1\246\6\0"+
    "\1\246\64\0\1\247\6\0\1\247\64\0\1\250\6\0"+
    "\1\250\64\0\1\251\6\0\1\251\64\0\1\252\6\0"+
    "\1\252\64\0\1\253\6\0\1\253\64\0\1\254\6\0"+
    "\1\254\64\0\1\255\6\0\1\255\64\0\1\256\6\0"+
    "\1\256\64\0\1\257\6\0\1\257\64\0\1\260\6\0"+
    "\1\260\64\0\1\261\6\0\1\261\60\0\1\177\20\0"+
    "\2\177\55\0\1\262\6\0\1\262\64\0\1\263\6\0"+
    "\1\263\64\0\1\264\6\0\1\264\64\0\1\265\6\0"+
    "\1\265\64\0\1\266\6\0\1\266\64\0\1\267\6\0"+
    "\1\267\64\0\1\270\6\0\1\270\64\0\1\271\6\0"+
    "\1\271\64\0\1\272\6\0\1\272\64\0\1\273\6\0"+
    "\1\273\64\0\1\274\6\0\1\274\60\0\1\217\20\0"+
    "\2\217\55\0\1\275\6\0\1\275\64\0\1\276\6\0"+
    "\1\276\64\0\1\277\6\0\1\277\64\0\1\300\6\0"+
    "\1\300\64\0\1\301\6\0\1\301\64\0\1\302\6\0"+
    "\1\302\64\0\1\303\6\0\1\303\60\0\1\237\20\0"+
    "\2\237\55\0\1\304\6\0\1\304\64\0\1\305\6\0"+
    "\1\305\64\0\1\306\6\0\1\306\51\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\5\1\1\11\2\1\1\11\2\1\2\11"+
    "\3\1\1\11\2\1\5\11\6\1\6\0\1\11\2\0"+
    "\1\11\1\1\3\11\6\1\1\0\1\11\6\0\7\1"+
    "\6\0\7\1\6\0\2\1\6\0\1\1\1\0\1\1"+
    "\5\0\1\1\1\0\2\1\3\0\1\11\3\0\1\11"+
    "\1\1\25\0\1\1\37\0\1\1\16\0\1\1\13\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[198];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private static final boolean _DEBUG = false;

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);

  }
  private Symbol plrs(int type, String message){
    if(_DEBUG){
      System.out.println(message + " " + yytext());
    }
    return symbol(type);
  }
  private Symbol plrs(int type, Object value, String message){
    if(_DEBUG){
      System.out.println(message + " " + yytext());
    }
    return symbol(type, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 158) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { return plrs(sym.CODE, "CODE");
          }
        case 34: break;
        case 21: 
          { return plrs(sym.AND, "AND");
          }
        case 35: break;
        case 11: 
          { return plrs(sym.EQ, "EQ");
          }
        case 36: break;
        case 14: 
          { return plrs(sym.RC, "RC");
          }
        case 37: break;
        case 33: 
          { return plrs(sym.NUMBER, "NUMBER");
          }
        case 38: break;
        case 25: 
          { return plrs(sym.INIT, "INIT");
          }
        case 39: break;
        case 13: 
          { return plrs(sym.RO, "RO");
          }
        case 40: break;
        case 15: 
          { return plrs(sym.SO, "SO");
          }
        case 41: break;
        case 19: 
          { return plrs(sym.SEP, "SEP");
          }
        case 42: break;
        case 28: 
          { return plrs(sym.WHEN, "WHEN");
          }
        case 43: break;
        case 7: 
          { return plrs(sym.DT, "DT");
          }
        case 44: break;
        case 18: 
          { return plrs(sym.OR, "OR");
          }
        case 45: break;
        case 10: 
          { return plrs(sym.CM, "CM");
          }
        case 46: break;
        case 12: 
          { return plrs(sym.NOT, "NOT");
          }
        case 47: break;
        case 29: 
          { return plrs(sym.PRINT, "PRINT");
          }
        case 48: break;
        case 5: 
          { return plrs(sym.MINUS, "MINUS");
          }
        case 49: break;
        case 31: 
          { return plrs(sym.DEFAULT, "DEFAULT");
          }
        case 50: break;
        case 16: 
          { return plrs(sym.SC, "SC");
          }
        case 51: break;
        case 2: 
          { ;
          }
        case 52: break;
        case 8: 
          { return plrs(sym.PLUS, "PLUS");
          }
        case 53: break;
        case 27: 
          { return plrs(sym.DONE, "DONE");
          }
        case 54: break;
        case 23: 
          { return plrs(sym.QUOT, new String(yytext()), "QUOT");
          }
        case 55: break;
        case 32: 
          { return plrs(sym.HOUR, "HOUR");
          }
        case 56: break;
        case 22: 
          { return plrs(sym.DO, "DO");
          }
        case 57: break;
        case 3: 
          { return plrs(sym.S, "S");
          }
        case 58: break;
        case 26: 
          { return plrs(sym.NEXT, "NEXT");
          }
        case 59: break;
        case 6: 
          { return plrs(sym.INT, new Integer(yytext()), "INT");
          }
        case 60: break;
        case 1: 
          { System.out.println("SCANNER ERROR: " + yytext());
          }
        case 61: break;
        case 4: 
          { return plrs(sym.ATT, new String(yytext()), "ATT");
          }
        case 62: break;
        case 17: 
          { yybegin(sect2); return plrs(sym.SEP, "SEP");
          }
        case 63: break;
        case 9: 
          { return plrs(sym.NAME, new String(yytext()), "NAME");
          }
        case 64: break;
        case 24: 
          { return plrs(sym.CASE, "CASE");
          }
        case 65: break;
        case 20: 
          { return plrs(sym.EQUAL, "EQUAL");
          }
        case 66: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        scanner scanner = null;
        try {
          scanner = new scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
