
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Tue Jul 04 18:59:43 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.io.*;
import java.lang.Math.*;

/** CUP v0.10k generated parser.
  * @version Tue Jul 04 18:59:43 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\003\010\000\002\004" +
    "\003\000\002\004\003\000\002\005\004\000\002\005\005" +
    "\000\002\006\012\000\002\006\012\000\002\006\012\000" +
    "\002\006\012\000\002\007\005\000\002\007\006\000\002" +
    "\010\007\000\002\010\004\000\002\011\006\000\002\011" +
    "\012\000\002\012\005\000\002\012\005\000\002\013\010" +
    "\000\002\017\007\000\002\017\005\000\002\020\005\000" +
    "\002\023\012\000\002\023\011\000\002\021\002\000\002" +
    "\024\010\000\002\024\006\000\002\024\007\000\002\024" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\004" +
    "\000\002\025\005\000\002\025\005\000\002\026\004\000" +
    "\002\026\004\000\002\026\003\000\002\026\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\010\022\004\023\010\024\007\001\002\000" +
    "\004\005\177\001\002\000\004\025\uffff\001\002\000\006" +
    "\022\155\023\157\001\002\000\004\005\134\001\002\000" +
    "\004\005\131\001\002\000\004\002\130\001\002\000\004" +
    "\025\ufffe\001\002\000\004\025\014\001\002\000\004\040" +
    "\017\001\002\000\006\025\036\040\017\001\002\000\004" +
    "\040\017\001\002\000\004\015\020\001\002\000\004\011" +
    "\021\001\002\000\004\041\023\001\002\000\006\004\026" +
    "\012\027\001\002\000\004\015\024\001\002\000\004\042" +
    "\025\001\002\000\006\004\uffed\012\uffed\001\002\000\004" +
    "\041\031\001\002\000\004\005\030\001\002\000\006\025" +
    "\uffef\040\uffef\001\002\000\004\015\032\001\002\000\004" +
    "\042\033\001\002\000\006\004\uffee\012\uffee\001\002\000" +
    "\004\040\017\001\002\000\006\025\ufff0\040\ufff0\001\002" +
    "\000\004\026\041\001\002\000\004\040\017\001\002\000" +
    "\006\025\ufff1\040\ufff1\001\002\000\004\040\126\001\002" +
    "\000\004\030\044\001\002\000\006\002\000\030\117\001" +
    "\002\000\016\007\050\013\046\014\047\021\045\040\052" +
    "\042\054\001\002\000\016\007\050\013\046\014\047\021" +
    "\045\040\052\042\054\001\002\000\004\042\115\001\002" +
    "\000\004\042\114\001\002\000\016\007\050\013\046\014" +
    "\047\021\045\040\052\042\054\001\002\000\004\016\110" +
    "\001\002\000\004\006\106\001\002\000\010\017\056\020" +
    "\057\031\055\001\002\000\014\010\uffdd\016\uffdd\017\uffdd" +
    "\020\uffdd\031\uffdd\001\002\000\006\033\uffe9\035\uffe9\001" +
    "\002\000\016\007\050\013\046\014\047\021\045\040\052" +
    "\042\054\001\002\000\016\007\050\013\046\014\047\021" +
    "\045\040\052\042\054\001\002\000\012\010\uffe3\017\056" +
    "\020\uffe3\031\uffe3\001\002\000\012\010\uffe4\017\uffe4\020" +
    "\uffe4\031\uffe4\001\002\000\006\033\065\035\063\001\002" +
    "\000\004\037\104\001\002\000\010\032\073\033\074\035" +
    "\072\001\002\000\004\040\066\001\002\000\004\034\067" +
    "\001\002\000\004\040\070\001\002\000\004\005\071\001" +
    "\002\000\010\032\uffe6\033\uffe6\035\uffe6\001\002\000\004" +
    "\037\102\001\002\000\004\005\101\001\002\000\004\040" +
    "\075\001\002\000\004\034\076\001\002\000\004\040\077" +
    "\001\002\000\004\005\100\001\002\000\010\032\uffe8\033" +
    "\uffe8\035\uffe8\001\002\000\006\002\uffea\030\uffea\001\002" +
    "\000\004\005\103\001\002\000\010\032\uffe7\033\uffe7\035" +
    "\uffe7\001\002\000\004\005\105\001\002\000\010\032\uffe5" +
    "\033\uffe5\035\uffe5\001\002\000\004\041\107\001\002\000" +
    "\014\010\uffdc\016\uffdc\017\uffdc\020\uffdc\031\uffdc\001\002" +
    "\000\012\013\046\014\047\040\052\042\054\001\002\000" +
    "\012\010\uffe0\017\uffe0\020\uffe0\031\uffe0\001\002\000\010" +
    "\010\113\017\056\020\057\001\002\000\012\010\uffe1\017" +
    "\uffe1\020\uffe1\031\uffe1\001\002\000\014\010\uffdf\016\uffdf" +
    "\017\uffdf\020\uffdf\031\uffdf\001\002\000\014\010\uffde\016" +
    "\uffde\017\uffde\020\uffde\031\uffde\001\002\000\012\010\uffe2" +
    "\017\uffe2\020\uffe2\031\uffe2\001\002\000\016\007\050\013" +
    "\046\014\047\021\045\040\052\042\054\001\002\000\010" +
    "\017\056\020\057\031\121\001\002\000\006\033\uffe9\035" +
    "\uffe9\001\002\000\006\033\065\035\063\001\002\000\010" +
    "\032\124\033\074\035\072\001\002\000\004\005\125\001" +
    "\002\000\006\002\uffeb\030\uffeb\001\002\000\004\005\127" +
    "\001\002\000\004\030\uffec\001\002\000\004\002\001\001" +
    "\002\000\004\023\132\001\002\000\004\005\133\001\002" +
    "\000\006\022\ufff6\023\ufff6\001\002\000\006\022\135\024" +
    "\136\001\002\000\004\005\150\001\002\000\004\005\137" +
    "\001\002\000\006\022\140\024\141\001\002\000\004\005" +
    "\145\001\002\000\004\005\142\001\002\000\004\022\143" +
    "\001\002\000\004\005\144\001\002\000\004\025\ufff8\001" +
    "\002\000\004\024\146\001\002\000\004\005\147\001\002" +
    "\000\004\025\ufff9\001\002\000\004\024\151\001\002\000" +
    "\004\005\152\001\002\000\004\024\153\001\002\000\004" +
    "\005\154\001\002\000\004\025\ufffa\001\002\000\004\005" +
    "\176\001\002\000\010\022\161\024\162\025\ufffd\001\002" +
    "\000\004\005\160\001\002\000\006\022\ufff7\023\ufff7\001" +
    "\002\000\004\005\173\001\002\000\004\005\164\001\002" +
    "\000\004\025\ufffc\001\002\000\004\024\165\001\002\000" +
    "\004\005\166\001\002\000\006\024\167\025\ufff3\001\002" +
    "\000\004\005\170\001\002\000\004\024\171\001\002\000" +
    "\004\005\172\001\002\000\004\025\ufff2\001\002\000\004" +
    "\022\174\001\002\000\004\005\175\001\002\000\010\022" +
    "\ufff5\024\ufff5\025\ufff5\001\002\000\010\022\ufff4\024\ufff4" +
    "\025\ufff4\001\002\000\004\024\200\001\002\000\004\005" +
    "\201\001\002\000\004\024\202\001\002\000\004\005\203" +
    "\001\002\000\004\024\204\001\002\000\004\005\205\001" +
    "\002\000\004\025\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\014\003\010\004\012\005\004\006\011\007" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\155\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\014\013\015\001\001\000\004\013\036\001\001\000" +
    "\004\013\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\034\001\001" +
    "\000\002\001\001\000\004\020\041\001\001\000\004\013" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\042\001\001\000\002\001\001\000\006\025\052\026" +
    "\050\001\001\000\006\025\115\026\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\111\026\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\061\001\001\000\006\025" +
    "\060\026\050\001\001\000\006\025\057\026\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\117\026\050\001\001\000\002\001\001\000\004\021" +
    "\121\001\001\000\004\024\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\162\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



  // ****** HASHMAP EXAMPLE ****** METHODS: put, get, entrySet
  public HashMap<String, HashMap<String, Integer>> table = new HashMap<String, HashMap<String, Integer>>();
  // ****** HASHMAP EXAMPLE ****** METHODS: add, get
  public ArrayList<String> dummy2 = new ArrayList<String>();

  public int getLine() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).left+1;
      }else return -1;
  }
  // Return the column number of actual symbol
  public int getColumn() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).right+1;
      }else return -1;
  }

  public Object stack ( int position){
    // returns the object at the specified position // from the top (tos) of the stack
    return(((Symbol)stack.elementAt(tos+position)).value);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    // print line
    void Pl(String s){
      System.out.println(s);
      return;
    }
    // print
    void P(String s){
      System.out.print(s);
      return;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_int ::= NAME DT ATT 
            { parser.Tree.reduce(3,"exp_int",0);
              Integer RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                HashMap<String,Integer> tb = parser.table.get(n);
            RESULT = tb.get(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exp_int*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_int ::= INT 
            { parser.Tree.reduce(1,"exp_int",0);
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exp_int*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_int ::= PLUS INT 
            { parser.Tree.reduce(2,"exp_int",0);
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exp_int*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp_int ::= MINUS INT 
            { parser.Tree.reduce(2,"exp_int",0);
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = -i; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*exp_int*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp_int EQUAL exp_int 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer y = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = x.equals(y); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= RO exp RC 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = x; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= NOT exp 
            { parser.Tree.reduce(2,"exp",0);
              Boolean RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = !x; 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp OR exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (x || y);  
              CUP$parser$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp AND exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean x = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean y = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (x && y); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cmd_l ::= PRINT QUOT S 
            { parser.Tree.reduce(3,"cmd_l",0);
              Object[] RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              String state = (String)parser.stack(-3);
                              Boolean exp = (Boolean)parser.stack(-5);
                              if(exp == true){
                                Pl(q);
                              }
                              RESULT = new Object[2];
                              RESULT[0] = state;
                              RESULT[1] = exp;
                              
              CUP$parser$result = new java_cup.runtime.Symbol(18/*cmd_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cmd_l ::= CASE NAME NEXT NAME S 
            { parser.Tree.reduce(5,"cmd_l",0);
              Object[] RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                    RESULT = new Object[2];
                                    String state = (String)parser.stack(-5);
                                    //Pl("STATE " + state);
                                    Boolean exp = (Boolean)parser.stack(-7);
                                    //Pl("BOOLEAN " + exp.toString());
                                    if((state.equals(n)) && (exp == true)){
                                       //Pl(state);
                                       RESULT[0] = n2;
                                       Pl("STATE SET TO " + n2);
                                    }
                                    else {
                                      RESULT[0] = state;
                                    }
                                    RESULT[1] = exp;
                                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*cmd_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cmd_l ::= cmd_l PRINT QUOT S 
            { parser.Tree.reduce(4,"cmd_l",0);
              Object[] RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object[] l = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                    if((Boolean)l[1] == true){
                                      Pl(q);
                                    }
                                    RESULT = l;
                                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*cmd_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cmd_l ::= cmd_l CASE NAME NEXT NAME S 
            { parser.Tree.reduce(6,"cmd_l",0);
              Object[] RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object[] l = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                    String state = (String)l[0];
                                    Boolean exp = (Boolean)l[1];
                                    if((state.equals(n)) && (exp == true)){
                                       //Pl(state);
                                       l[0] = n2;
                                       Pl("STATE SET TO " + n2);
                                    }
                                    RESULT = l;
                                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*cmd_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              String RESULT = null;
		 RESULT = (String)parser.stack(-3);
            Pl(RESULT); 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*NT0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // when_cmd_l ::= WHEN exp DO NT0 cmd_l DONE S 
            { parser.Tree.reduce(7,"when_cmd_l",0);
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object[] l = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                      String state = (String)l[0];
                      RESULT = new String(state);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(17/*when_cmd_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // when_cmd_l ::= when_cmd_l WHEN exp DO NT0 cmd_l DONE S 
            { parser.Tree.reduce(8,"when_cmd_l",0);
              String RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object[] l = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                      String state = (String)l[0];
                      RESULT = new String(state);
                  
              CUP$parser$result = new java_cup.runtime.Symbol(17/*when_cmd_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // init_cmd ::= INIT NAME S 
            { parser.Tree.reduce(3,"init_cmd",0);
              String RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = n; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*init_cmd*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // attribute_l ::= ATT EQ INT 
            { parser.Tree.reduce(3,"attribute_l",0);
              HashMap RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                            RESULT = new HashMap<String, Integer>();
                            RESULT.put(n, i);
   
              CUP$parser$result = new java_cup.runtime.Symbol(13/*attribute_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // attribute_l ::= attribute_l CM ATT EQ INT 
            { parser.Tree.reduce(5,"attribute_l",0);
              HashMap RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		HashMap l = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                            l.put(n,i);
                            RESULT = l;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(13/*attribute_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // state ::= NAME EQ SO attribute_l SC S 
            { parser.Tree.reduce(6,"state",0);
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap l = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                parser.table.put(n, l);
   
              CUP$parser$result = new java_cup.runtime.Symbol(9/*state*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // state_l ::= state state state 
            { parser.Tree.reduce(3,"state_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*state_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // state_l ::= state_l state state 
            { parser.Tree.reduce(3,"state_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*state_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // number ::= NUMBER S NUMBER S NUMBER S NUMBER S 
            { parser.Tree.reduce(8,"number",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // number ::= NUMBER S NUMBER S 
            { parser.Tree.reduce(4,"number",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*number*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_l ::= CODE S 
            { parser.Tree.reduce(2,"code_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*code_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_l ::= code_l CODE S CODE S 
            { parser.Tree.reduce(5,"code_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*code_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // hour_l ::= HOUR S HOUR S 
            { parser.Tree.reduce(4,"hour_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*hour_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // hour_l ::= hour_l HOUR S 
            { parser.Tree.reduce(3,"hour_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*hour_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header_2 ::= NUMBER S NUMBER S NUMBER S CODE S 
            { parser.Tree.reduce(8,"header_2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*header_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header_2 ::= NUMBER S NUMBER S CODE S NUMBER S 
            { parser.Tree.reduce(8,"header_2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*header_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header_2 ::= NUMBER S CODE S NUMBER S NUMBER S 
            { parser.Tree.reduce(8,"header_2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*header_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header_2 ::= CODE S NUMBER S NUMBER S NUMBER S 
            { parser.Tree.reduce(8,"header_2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*header_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header_1 ::= hour_l code_l number 
            { parser.Tree.reduce(3,"header_1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*header_1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header_1 ::= hour_l code_l 
            { parser.Tree.reduce(2,"header_1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*header_1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= header_2 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= header_1 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP state_l SEP init_cmd when_cmd_l 
            { parser.Tree.reduce(6,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

