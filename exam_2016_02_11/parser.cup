import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.io.*;
import java.lang.Math.*;

parser code {:

  // ****** HASHMAP EXAMPLE ****** METHODS: put, get, entrySet
  public HashMap<String, HashMap<String, Integer>> vars = new HashMap<String, HashMap<String, Integer>>();
  // ****** HASHMAP EXAMPLE ****** METHODS: add, get
  public ArrayList<String> dummy2 = new ArrayList<String>();

  public int getLine() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).left+1;
      }else return -1;
  }
  // Return the column number of actual symbol
  public int getColumn() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).right+1;
      }else return -1;
  }

  public Object stack ( int position){
    // returns the object at the specified position // from the top (tos) of the stack
    return(((Symbol)stack.elementAt(tos+position)).value);
  }
:};

action code {:
    // print line
    void Pl(String s){
      System.out.println(s);
      return;
    }
    // print
    void P(String s){
      System.out.print(s);
      return;
    }
:}

terminal CL, CM, S, DT;
terminal RO, RC, BO, BC;
terminal PLUS, MINUS;
terminal EQUAL, DIF;
terminal AND, OR, NOT;
terminal CODE, DATE;
terminal START, MOVE, VAR, WHEN, DONE, THEN, SEP, UMINUS;

terminal Integer INT;
terminal String NAME;

non terminal prog, commands_l, commands, var_inst, header, code_l;
non terminal move_inst, when_inst;

non terminal Integer[] start_inst, NT0, NT1, move_l;
non terminal Integer coordinate, move_item, exp_int;
non terminal HashMap attribute_l;
non terminal Object[] attribute;
non terminal Boolean exp;

// Precedences and associativities
// lower precedences
precedence left OR;
precedence left AND;
precedence left NOT;
precedence left EQUAL;
precedence left DIF;
precedence left PLUS, MINUS;
precedence left UMINUS;
// higher precedences


start with prog;




prog ::= header SEP start_inst commands_l
;


// header
header ::= code_l | code_l DATE S code_l
;
code_l ::= | code_l CODE S
;

// section 2

commands_l ::= | commands_l NT0 commands
;

NT0 ::= {: RESULT = new Integer[3];
          RESULT = (Integer[])parser.stack(-1); :}
;

commands ::= NT1 var_inst | NT1 move_inst | NT1 when_inst
;

NT1 ::= {: RESULT = new Integer[3];
            RESULT = (Integer[])parser.stack(0);  :}
;

// start instruction
start_inst ::= START coordinate:c1 CM coordinate:c2 CM coordinate:c3 S {:
                                              RESULT = new Integer[3];
                                              RESULT[0] = c1;
                                              RESULT[1] = c2;
                                              RESULT[2] = c3;

                                              :}
;
coordinate ::= PLUS INT:i {:
                  RESULT = i;
                  :}
              | MINUS INT:i {:
                  RESULT = -i;

                :}
;

// var instruction
var_inst ::= VAR BO attribute_l:l BC NAME:n S {:
                        parser.vars.put(n, l);
   :}
;
attribute_l ::= attribute_l:l CM attribute:a {:
                      l.put((String)a[0], (Integer)a[1]);
                      RESULT = l;
                      :}
            | attribute:a1 CM attribute:a2 CM attribute:a3 {:
                RESULT = new HashMap<String, Integer>();
                RESULT.put((String)a1[0], (Integer)a1[1]);
                RESULT.put((String)a2[0], (Integer)a2[1]);
                RESULT.put((String)a3[0], (Integer)a3[1]);
               :}
;
attribute ::= NAME:n CL coordinate:c {:
                        RESULT = new Object[2];
                        RESULT[0] = (String)n;
                        RESULT[1] = (Integer)c;
   :}
;

//move instruction
move_inst ::= MOVE move_item:m1 CM move_item:m2 CM move_item:m3 S {:
                  Integer[] p = new Integer[3];
                  p = (Integer[])parser.stack(-7);
                  p[0] += m1;
                  p[1] += m2;
                  p[2] += m3;
                  Pl(Arrays.toString(p));
                  :}
;

move_item ::= coordinate:c {: RESULT = c; :}
            | NAME:n1 DT NAME:n2 {:
                    HashMap<String, Integer> first = (HashMap)parser.vars.get(n1);
                    RESULT = first.get(n2);
               :}
;

//when instruction
when_inst ::= WHEN exp:e THEN move_l:l DONE S {:

                          if(e == true){
                            Integer[] p = new Integer[3];
                            p = (Integer[])parser.stack(-6);
                            p[0] += l[0];
                            p[1] += l[1];
                            p[2] += l[2];
                            Pl(Arrays.toString(p));
                          }

                      :}
;
move_l ::= move_l:l MOVE move_item:m1 CM move_item:m2 CM move_item:m3 S {:
                  l[0] = l[0] + m1;
                  l[1] = l[1] + m2;
                  l[2] = l[2] + m3;
                  RESULT = l;
              :}
        | MOVE move_item:m1 CM move_item:m2 CM move_item:m3 S {:

              RESULT = new Integer[3];
              RESULT[0] = m1;
              RESULT[1] = m2;
              RESULT[2] = m3;
        :}
;

exp ::= exp:a OR exp:b {: RESULT = (a || b); :}
      | NOT exp:a {: RESULT = !a; :}
      | exp:a AND exp:b {: RESULT = (a && b); :}
      | exp_int:a EQUAL exp_int:b {: RESULT = a.equals(b); :} %prec UMINUS
      | exp_int:a DIF exp_int:b {: RESULT = !(a.equals(b)); :} %prec UMINUS
;
exp_int ::= PLUS INT:i   {: RESULT = i; :}
          | MINUS INT:i  {: RESULT = -i; :}
          | NAME:n1 DT NAME:n2  {:
              HashMap<String, Integer> first = (HashMap)parser.vars.get(n1);
              RESULT = first.get(n2);
              :}
;
