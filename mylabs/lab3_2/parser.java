
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jun 18 16:52:37 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun Jun 18 16:52:37 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\003\005\000\002\004" +
    "\004\000\002\004\003\000\002\005\006\000\002\006\005" +
    "\000\002\006\003\000\002\007\011\000\002\010\004\000" +
    "\002\010\005\000\002\011\004\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\004\000\002\012" +
    "\004\000\002\012\003\000\002\013\006\000\002\014\005" +
    "\000\002\014\003\000\002\015\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\004\004\006\001\002\000\006\004\ufffe\017" +
    "\ufffe\001\002\000\004\002\055\001\002\000\004\005\026" +
    "\001\002\000\006\004\006\017\010\001\002\000\004\004" +
    "\013\001\002\000\006\004\uffff\017\uffff\001\002\000\006" +
    "\002\ufff1\004\ufff1\001\002\000\004\007\016\001\002\000" +
    "\006\002\000\004\013\001\002\000\006\002\ufff2\004\ufff2" +
    "\001\002\000\004\022\017\001\002\000\004\006\025\001" +
    "\002\000\006\020\uffee\021\uffee\001\002\000\006\020\022" +
    "\021\023\001\002\000\004\022\017\001\002\000\006\002" +
    "\ufff0\004\ufff0\001\002\000\006\020\uffef\021\uffef\001\002" +
    "\000\006\020\uffed\021\uffed\001\002\000\004\006\030\001" +
    "\002\000\006\020\ufffb\021\ufffb\001\002\000\004\007\035" +
    "\001\002\000\006\020\032\021\033\001\002\000\004\006" +
    "\030\001\002\000\006\004\ufffd\017\ufffd\001\002\000\006" +
    "\020\ufffc\021\ufffc\001\002\000\004\004\036\001\002\000" +
    "\004\007\037\001\002\000\004\010\040\001\002\000\004" +
    "\007\041\001\002\000\006\011\044\012\042\001\002\000" +
    "\006\014\054\015\053\001\002\000\004\010\051\001\002" +
    "\000\010\013\046\014\050\015\047\001\002\000\006\020" +
    "\ufffa\021\ufffa\001\002\000\004\010\ufff4\001\002\000\004" +
    "\010\ufff3\001\002\000\004\010\ufff5\001\002\000\010\016" +
    "\052\020\ufff9\021\ufff9\001\002\000\006\020\ufff8\021\ufff8" +
    "\001\002\000\004\010\ufff6\001\002\000\004\010\ufff7\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\010\003\004\004\006\005\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\010\001\001\000\006\012\013\013\011\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\014\001\001\000\002\001\001\000\006\014\020\015" +
    "\017\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\023\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\030\007\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\010\044\011\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // loan ::= DATE ISBN 
            { parser.Tree.reduce(2,"loan",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*loan*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // l_loan ::= loan 
            { parser.Tree.reduce(1,"l_loan",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*l_loan*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // l_loan ::= l_loan CM loan 
            { parser.Tree.reduce(3,"l_loan",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*l_loan*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // lend ::= NAME CL l_loan S 
            { parser.Tree.reduce(4,"lend",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*lend*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // l_lend ::= lend 
            { parser.Tree.reduce(1,"l_lend",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*l_lend*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // l_lend ::= l_lend lend 
            { parser.Tree.reduce(2,"l_lend",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*l_lend*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // genre ::= LS SO 
            { parser.Tree.reduce(2,"genre",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*genre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // genre ::= LS BO 
            { parser.Tree.reduce(2,"genre",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*genre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // genre ::= LS AV 
            { parser.Tree.reduce(2,"genre",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*genre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // genre ::= LI SO 
            { parser.Tree.reduce(2,"genre",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*genre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // genre ::= LI AV 
            { parser.Tree.reduce(2,"genre",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*genre*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // collocation ::= genre INT LETTER 
            { parser.Tree.reduce(3,"collocation",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*collocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // collocation ::= genre INT 
            { parser.Tree.reduce(2,"collocation",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*collocation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // item ::= ISBN CL NAME CL INT CL collocation 
            { parser.Tree.reduce(7,"item",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*item*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // l_item ::= item 
            { parser.Tree.reduce(1,"l_item",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*l_item*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // l_item ::= l_item CM item 
            { parser.Tree.reduce(3,"l_item",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*l_item*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // entry ::= NAME ARROW l_item S 
            { parser.Tree.reduce(4,"entry",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*entry*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // l_entry ::= entry 
            { parser.Tree.reduce(1,"l_entry",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*l_entry*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // l_entry ::= l_entry entry 
            { parser.Tree.reduce(2,"l_entry",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*l_entry*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= l_entry SEP l_lend 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

