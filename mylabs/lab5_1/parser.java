
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun May 21 12:15:59 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;

/** CUP v0.10k generated parser.
  * @version Sun May 21 12:15:59 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\006\004\000\002\002\004\000\002\007" +
    "\004\000\002\007\002\000\002\010\004\000\002\010\004" +
    "\000\002\010\003\000\002\010\003\000\002\011\006\000" +
    "\002\012\006\000\002\003\005\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\005\000\002\003\005\000\002\003\003\000\002\003\003" +
    "\000\002\003\004\000\002\003\004\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\003\000\002\004\003\000\002\004\004\000\002\004\004" +
    "\000\002\005\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\020\004\ufffe\005\ufffe\006\ufffe\007\ufffe\015" +
    "\ufffe\022\ufffe\024\ufffe\001\002\000\020\004\013\005\020" +
    "\006\016\007\017\015\023\022\010\024\021\001\002\000" +
    "\004\002\006\001\002\000\004\002\000\001\002\000\020" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\015\ufffb\022\ufffb\024" +
    "\ufffb\001\002\000\016\004\013\005\034\006\033\007\017" +
    "\015\023\022\010\001\002\000\026\010\uffe4\011\uffe4\012" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021\uffe4" +
    "\023\uffe4\001\002\000\016\012\075\014\047\015\046\016" +
    "\050\017\051\020\045\001\002\000\026\010\uffef\011\uffef" +
    "\012\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021" +
    "\uffef\023\uffef\001\002\000\020\004\uffff\005\uffff\006\uffff" +
    "\007\uffff\015\uffff\022\uffff\024\uffff\001\002\000\016\012" +
    "\074\014\037\015\035\016\040\017\042\021\041\001\002" +
    "\000\020\012\uffe5\013\071\014\uffe5\015\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\001\002\000\016\004\013\005\034\006\033" +
    "\007\017\015\023\022\010\001\002\000\020\012\ufff0\013" +
    "\030\014\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\001\002" +
    "\000\004\002\001\001\002\000\020\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\015\ufffa\022\ufffa\024\ufffa\001\002\000\012" +
    "\004\026\005\024\006\027\007\017\001\002\000\026\010" +
    "\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\021\uffee\023\uffee\001\002\000\026\010\uffe2\011" +
    "\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2" +
    "\021\uffe2\023\uffe2\001\002\000\026\010\uffed\011\uffed\012" +
    "\uffed\014\uffed\015\uffed\016\uffed\017\uffed\020\uffed\021\uffed" +
    "\023\uffed\001\002\000\026\010\uffe3\011\uffe3\012\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\023\uffe3" +
    "\001\002\000\016\004\013\005\034\006\033\007\017\015" +
    "\023\022\010\001\002\000\014\014\047\015\046\016\050" +
    "\017\051\020\045\001\002\000\016\012\036\014\037\015" +
    "\035\016\040\017\042\021\041\001\002\000\026\010\uffe5" +
    "\011\uffe5\012\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020" +
    "\uffe5\021\uffe5\023\uffe5\001\002\000\026\010\ufff0\011\ufff0" +
    "\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\021" +
    "\ufff0\023\ufff0\001\002\000\016\004\013\005\034\006\033" +
    "\007\017\015\023\022\010\001\002\000\020\004\ufff9\005" +
    "\ufff9\006\ufff9\007\ufff9\015\ufff9\022\ufff9\024\ufff9\001\002" +
    "\000\016\004\013\005\034\006\033\007\017\015\023\022" +
    "\010\001\002\000\016\004\013\005\034\006\033\007\017" +
    "\015\023\022\010\001\002\000\016\004\013\005\034\006" +
    "\033\007\017\015\023\022\010\001\002\000\016\004\013" +
    "\005\034\006\033\007\017\015\023\022\010\001\002\000" +
    "\026\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\050" +
    "\017\uffe9\020\uffe9\021\uffe9\023\uffe9\001\002\000\026\010" +
    "\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\040\017\ufff4" +
    "\020\ufff4\021\041\023\ufff4\001\002\000\016\004\013\005" +
    "\034\006\033\007\017\015\023\022\010\001\002\000\016" +
    "\004\013\005\034\006\033\007\017\015\023\022\010\001" +
    "\002\000\016\004\013\005\034\006\033\007\017\015\023" +
    "\022\010\001\002\000\016\004\013\005\034\006\033\007" +
    "\017\015\023\022\010\001\002\000\016\004\013\005\034" +
    "\006\033\007\017\015\023\022\010\001\002\000\026\010" +
    "\uffe7\011\uffe7\012\uffe7\014\uffe7\015\uffe7\016\040\017\uffe7" +
    "\020\uffe7\021\041\023\uffe7\001\002\000\026\010\uffe8\011" +
    "\uffe8\012\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8" +
    "\021\041\023\uffe8\001\002\000\026\010\uffec\011\uffec\012" +
    "\uffec\014\uffec\015\uffec\016\050\017\051\020\045\021\uffec" +
    "\023\uffec\001\002\000\014\014\037\015\035\016\040\017" +
    "\042\021\041\001\002\000\026\010\uffeb\011\uffeb\012\uffeb" +
    "\014\047\015\uffeb\016\050\017\051\020\045\021\uffeb\023" +
    "\uffeb\001\002\000\026\010\ufff2\011\ufff2\012\ufff2\014\ufff2" +
    "\015\ufff2\016\050\017\051\020\ufff2\021\ufff2\023\ufff2\001" +
    "\002\000\026\010\ufff3\011\ufff3\012\ufff3\014\ufff3\015\ufff3" +
    "\016\ufff3\017\ufff3\020\ufff3\021\ufff3\023\ufff3\001\002\000" +
    "\026\010\uffea\011\uffea\012\uffea\014\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\023\uffea\001\002\000\026\010" +
    "\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5\016\ufff5\017\ufff5" +
    "\020\ufff5\021\041\023\ufff5\001\002\000\026\010\ufff7\011" +
    "\ufff7\012\ufff7\014\ufff7\015\ufff7\016\040\017\042\020\ufff7" +
    "\021\041\023\ufff7\001\002\000\026\010\ufff6\011\ufff6\012" +
    "\ufff6\014\037\015\ufff6\016\040\017\042\020\ufff6\021\041" +
    "\023\ufff6\001\002\000\016\011\066\014\037\015\035\016" +
    "\040\017\042\021\041\001\002\000\016\004\013\005\034" +
    "\006\033\007\017\015\023\022\010\001\002\000\016\010" +
    "\070\014\037\015\035\016\040\017\042\021\041\001\002" +
    "\000\026\010\uffe1\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\023\uffe1\001\002\000\016" +
    "\004\013\005\034\006\033\007\017\015\023\022\010\001" +
    "\002\000\016\012\073\014\047\015\046\016\050\017\051" +
    "\020\045\001\002\000\020\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\015\ufff8\022\ufff8\024\ufff8\001\002\000\020\004\ufffd" +
    "\005\ufffd\006\ufffd\007\ufffd\015\ufffd\022\ufffd\024\ufffd\001" +
    "\002\000\020\004\ufffc\005\ufffc\006\ufffc\007\ufffc\015\ufffc" +
    "\022\ufffc\024\ufffc\001\002\000\016\014\047\015\046\016" +
    "\050\017\051\020\045\023\101\001\002\000\016\014\037" +
    "\015\035\016\040\017\042\021\041\023\100\001\002\000" +
    "\026\010\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\020\ufff1\021\ufff1\023\ufff1\001\002\000\026\010" +
    "\uffe6\011\uffe6\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6" +
    "\020\uffe6\021\uffe6\023\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\006\006\004\007\003\001\001\000\016\003" +
    "\014\004\011\005\010\010\013\011\006\012\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\076\004\075\005\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\064\004\030" +
    "\005\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\031\004\030\005\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\063\004\030\005\010\001\001\000\002\001\001" +
    "\000\010\003\062\004\030\005\010\001\001\000\010\003" +
    "\061\004\060\005\010\001\001\000\010\003\057\004\030" +
    "\005\010\001\001\000\010\003\043\004\042\005\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\003\054" +
    "\004\056\005\010\001\001\000\010\003\054\004\055\005" +
    "\010\001\001\000\010\003\054\004\053\005\010\001\001" +
    "\000\010\003\052\004\030\005\010\001\001\000\010\003" +
    "\051\004\030\005\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\003\066\004\030\005\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\054\004" +
    "\071\005\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    scalarTable = new HashMap<Character, Double>();
    vectorTable = new HashMap<Character, MyVector>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


  public HashMap<Character, Double> scalarTable;
  public HashMap<Character, MyVector> vectorTable;

  public void syntax_error(Symbol current_symbol) {
    StringBuffer m = new StringBuffer("Error");

    if (current_symbol.left != -1) {
      m.append(" in line " + (current_symbol.left+1));
  m.append(", column " + (current_symbol.right+1));
    }
    m.append(", symbol: " + (current_symbol));
    m.append(" : Syntax Error");

  System.err.println(m);
  } 


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vector ::= SO scexp C scexp SC 
            { parser.Tree.reduce(5,"vector",0);
              MyVector RESULT = null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double val1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double val2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MyVector(val1, val2); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*vector*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vcexp ::= MIN vector 
            { parser.Tree.reduce(2,"vcexp",0);
              MyVector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MyVector v = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v.scale(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vcexp ::= MIN VCVAR 
            { parser.Tree.reduce(2,"vcexp",0);
              MyVector RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character id = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vectorTable.get(id).scale(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // vcexp ::= vector 
            { parser.Tree.reduce(1,"vcexp",0);
              MyVector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MyVector v = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // vcexp ::= VCVAR 
            { parser.Tree.reduce(1,"vcexp",0);
              MyVector RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character id = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vectorTable.get(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vcexp ::= RO vcexp RC 
            { parser.Tree.reduce(3,"vcexp",0);
              MyVector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MyVector v = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // vcexp ::= vcexp DIV scexp 
            { parser.Tree.reduce(3,"vcexp",0);
              MyVector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MyVector v = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v.scale(1/val); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vcexp ::= vcexp MUL scexp 
            { parser.Tree.reduce(3,"vcexp",0);
              MyVector RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MyVector v = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v.scale(val); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vcexp ::= scexp DIV vcexp 
            { parser.Tree.reduce(3,"vcexp",0);
              MyVector RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MyVector v = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v.scale(1/val); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vcexp ::= scexp MUL vcexp 
            { parser.Tree.reduce(3,"vcexp",0);
              MyVector RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MyVector v = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v.scale(val); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vcexp ::= vcexp MIN vcexp 
            { parser.Tree.reduce(3,"vcexp",0);
              MyVector RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MyVector v1 = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MyVector v2 = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v1.minus(v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vcexp ::= vcexp PLUS vcexp 
            { parser.Tree.reduce(3,"vcexp",0);
              MyVector RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MyVector v1 = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MyVector v2 = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v1.plus(v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*vcexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // scexp ::= MIN NUMBER 
            { parser.Tree.reduce(2,"scexp",1);
              Double RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = -1*val;  
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // scexp ::= MIN SCVAR 
            { parser.Tree.reduce(2,"scexp",1);
              Double RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character id = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = -1*(parser.scalarTable.get(id)); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // scexp ::= NUMBER 
            { parser.Tree.reduce(1,"scexp",1);
              Double RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = val; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // scexp ::= SCVAR 
            { parser.Tree.reduce(1,"scexp",1);
              Double RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Character id = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.scalarTable.get(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // scexp ::= RO scexp RC 
            { parser.Tree.reduce(3,"scexp",1);
              Double RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = val; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // scexp ::= vcexp SCPR vcexp 
            { parser.Tree.reduce(3,"scexp",1);
              Double RESULT = null;
		int v1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		MyVector v1 = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		MyVector v2 = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v1.dot(v2); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // scexp ::= scexp EXP scexp 
            { parser.Tree.reduce(3,"scexp",1);
              Double RESULT = null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double val1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double val2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = val1-val2; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // scexp ::= scexp DIV scexp 
            { parser.Tree.reduce(3,"scexp",1);
              Double RESULT = null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double val1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double val2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = val1/val2; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // scexp ::= scexp MUL scexp 
            { parser.Tree.reduce(3,"scexp",1);
              Double RESULT = null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double val1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double val2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = val1*val2; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // scexp ::= scexp MIN scexp 
            { parser.Tree.reduce(3,"scexp",1);
              Double RESULT = null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double val1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double val2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = val1-val2; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // scexp ::= scexp PLUS scexp 
            { parser.Tree.reduce(3,"scexp",1);
              Double RESULT = null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double val1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Double val2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = val1+val2; 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*scexp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vcassignemt ::= VCVAR EQ vcexp S 
            { parser.Tree.reduce(4,"vcassignemt",0);
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character id = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MyVector v = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.vectorTable.put(id, v);
                                              System.out.println("Assignment: " + id + " " + v.toString()); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*vcassignemt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // scassignment ::= SCVAR EQ scexp S 
            { parser.Tree.reduce(4,"scassignment",0);
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character id = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.scalarTable.put(id, val);
                                              System.out.println("Assignment: " + id + " " + val); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*scassignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // operation ::= vcassignemt 
            { parser.Tree.reduce(1,"operation",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*operation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // operation ::= scassignment 
            { parser.Tree.reduce(1,"operation",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*operation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // operation ::= vcexp S 
            { parser.Tree.reduce(2,"operation",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MyVector v = (MyVector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Vector Expression: " + v.toString()); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*operation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // operation ::= scexp S 
            { parser.Tree.reduce(2,"operation",0);
              Object RESULT = null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Scalar Expression: " + val); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*operation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // operations ::= 
            { parser.Tree.reduce(0,"operations",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*operations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // operations ::= operations operation 
            { parser.Tree.reduce(2,"operations",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*operations*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= operations END 
            { parser.Tree.reduce(2,"prog",0);
              Object RESULT = null;
		 System.out.println("Parsing Complete"); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

