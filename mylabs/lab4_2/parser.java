
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Wed May 17 16:32:12 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Wed May 17 16:32:12 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\003\004\000\002\015" +
    "\004\000\002\015\002\000\002\016\005\000\002\016\004" +
    "\000\002\021\003\000\002\021\003\000\002\017\003\000" +
    "\002\017\005\000\002\020\004\000\002\022\002\000\002" +
    "\022\006\000\002\004\004\000\002\004\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\010\004\000" +
    "\002\010\006\000\002\011\005\000\002\006\007\000\002" +
    "\006\005\000\002\023\005\000\002\007\005\000\002\024" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\012\006\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\004\000\002\012\004\000\002\013\003\000" +
    "\002\013\003\000\002\014\003\000\002\014\003\000\002" +
    "\025\003\000\002\025\006\000\002\025\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\022\003\ufffe\006\ufffe\007\ufffe\010\ufffe\011" +
    "\ufffe\015\ufffe\041\ufffe\042\ufffe\001\002\000\022\003\024" +
    "\006\022\007\026\010\020\011\011\015\021\041\015\042" +
    "\016\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\022\002\ufff2\006\ufff2\007\ufff2\010\ufff2\011" +
    "\ufff2\012\ufff2\015\ufff2\016\ufff2\001\002\000\022\002\uffef" +
    "\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef\015\uffef\016" +
    "\uffef\001\002\000\004\013\140\001\002\000\006\022\135" +
    "\035\134\001\002\000\022\002\ufff0\006\ufff0\007\ufff0\010" +
    "\ufff0\011\ufff0\012\ufff0\015\ufff0\016\ufff0\001\002\000\020" +
    "\002\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\015\ufff3\016" +
    "\ufff3\001\002\000\004\006\ufffb\001\002\000\004\006\ufffa" +
    "\001\002\000\022\002\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\015\ufff1\016\ufff1\001\002\000\004\013\060" +
    "\001\002\000\016\003\053\006\022\007\026\010\020\011" +
    "\011\015\021\001\002\000\042\014\uffce\021\046\022\uffce" +
    "\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031" +
    "\uffce\032\uffce\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce" +
    "\001\002\000\004\006\034\001\002\000\004\022\033\001" +
    "\002\000\022\003\uffff\006\uffff\007\uffff\010\uffff\011\uffff" +
    "\015\uffff\041\uffff\042\uffff\001\002\000\004\006\022\001" +
    "\002\000\016\002\000\006\022\007\026\010\020\011\011" +
    "\015\021\001\002\000\020\002\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\011\ufff4\015\ufff4\016\ufff4\001\002\000\004\022\032" +
    "\001\002\000\022\002\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\015\uffea\016\uffea\001\002\000\022\003\ufffc" +
    "\006\ufffc\007\ufffc\010\ufffc\011\ufffc\015\ufffc\041\ufffc\042" +
    "\ufffc\001\002\000\010\020\ufff6\021\ufff6\022\ufff6\001\002" +
    "\000\006\020\037\022\040\001\002\000\006\020\ufff9\022" +
    "\ufff9\001\002\000\004\006\034\001\002\000\022\003\ufffd" +
    "\006\ufffd\007\ufffd\010\ufffd\011\ufffd\015\ufffd\041\ufffd\042" +
    "\ufffd\001\002\000\006\020\ufff8\022\ufff8\001\002\000\010" +
    "\020\ufff7\021\043\022\ufff7\001\002\000\004\004\044\001" +
    "\002\000\004\017\045\001\002\000\010\020\ufff5\021\ufff5" +
    "\022\ufff5\001\002\000\006\004\050\006\047\001\002\000" +
    "\004\017\052\001\002\000\004\017\051\001\002\000\040" +
    "\014\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\036\uffcd\037\uffcd\001\002\000\040\014\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\001" +
    "\002\000\004\016\056\001\002\000\016\006\022\007\026" +
    "\010\020\011\011\015\021\016\055\001\002\000\022\002" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\015\uffee" +
    "\016\uffee\001\002\000\022\002\uffed\006\uffed\007\uffed\010" +
    "\uffed\011\uffed\012\uffed\015\uffed\016\uffed\001\002\000\014" +
    "\006\022\007\026\010\020\011\011\015\021\001\002\000" +
    "\016\004\067\005\061\006\022\013\064\024\063\040\062" +
    "\001\002\000\040\014\uffd5\022\uffd5\023\uffd5\024\uffd5\025" +
    "\uffd5\026\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\035\uffd5\036\uffd5\037\uffd5\001\002\000\016\004" +
    "\067\005\061\006\022\013\064\024\063\040\062\001\002" +
    "\000\006\004\127\005\126\001\002\000\016\004\067\005" +
    "\061\006\022\013\064\024\063\040\062\001\002\000\036" +
    "\014\100\023\077\024\071\025\075\026\102\027\106\030" +
    "\104\031\073\032\074\033\103\034\072\035\076\036\070" +
    "\037\105\001\002\000\040\014\uffd7\022\uffd7\023\uffd7\024" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7" +
    "\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037\uffd7\001\002\000" +
    "\040\014\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\001\002\000\016\004\067\005\061" +
    "\006\022\013\064\024\063\040\062\001\002\000\016\004" +
    "\067\005\061\006\022\013\064\024\063\040\062\001\002" +
    "\000\016\004\uffcf\005\uffcf\006\uffcf\013\uffcf\024\uffcf\040" +
    "\uffcf\001\002\000\016\004\uffd2\005\uffd2\006\uffd2\013\uffd2" +
    "\024\uffd2\040\uffd2\001\002\000\016\004\uffd1\005\uffd1\006" +
    "\uffd1\013\uffd1\024\uffd1\040\uffd1\001\002\000\016\004\067" +
    "\005\061\006\022\013\064\024\063\040\062\001\002\000" +
    "\004\035\117\001\002\000\016\004\067\005\061\006\022" +
    "\013\064\024\063\040\062\001\002\000\014\006\uffe7\007" +
    "\uffe7\010\uffe7\011\uffe7\015\uffe7\001\002\000\016\004\067" +
    "\005\061\006\022\013\064\024\063\040\062\001\002\000" +
    "\016\004\067\005\061\006\022\013\064\024\063\040\062" +
    "\001\002\000\016\004\uffd0\005\uffd0\006\uffd0\013\uffd0\024" +
    "\uffd0\040\uffd0\001\002\000\016\004\067\005\061\006\022" +
    "\013\064\024\063\040\062\001\002\000\016\004\067\005" +
    "\061\006\022\013\064\024\063\040\062\001\002\000\016" +
    "\004\067\005\061\006\022\013\064\024\063\040\062\001" +
    "\002\000\016\004\067\005\061\006\022\013\064\024\063" +
    "\040\062\001\002\000\040\014\uffde\022\uffde\023\077\024" +
    "\071\025\075\026\102\027\106\030\104\031\073\032\074" +
    "\033\103\034\072\035\076\036\070\037\105\001\002\000" +
    "\040\014\uffe0\022\uffe0\023\077\024\071\025\075\026\102" +
    "\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0\035" +
    "\uffe0\036\uffe0\037\uffe0\001\002\000\040\014\uffe3\022\uffe3" +
    "\023\077\024\071\025\075\026\102\027\106\030\104\031" +
    "\073\032\074\033\103\034\072\035\076\036\070\037\uffe3" +
    "\001\002\000\040\014\uffdf\022\uffdf\023\077\024\071\025" +
    "\075\026\102\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\001\002\000\040\014" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\036" +
    "\uffd9\037\uffd9\001\002\000\040\014\uffdd\022\uffdd\023\077" +
    "\024\071\025\075\026\102\027\106\030\104\031\073\032" +
    "\074\033\103\034\072\035\076\036\070\037\105\001\002" +
    "\000\040\014\uffdc\022\uffdc\023\uffdc\024\uffdc\025\075\026" +
    "\102\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\034\uffdc" +
    "\035\uffdc\036\uffdc\037\uffdc\001\002\000\016\004\067\005" +
    "\061\006\022\013\064\024\063\040\062\001\002\000\040" +
    "\014\uffe1\022\uffe1\023\077\024\071\025\075\026\102\027" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1" +
    "\036\uffe1\037\uffe1\001\002\000\040\014\uffda\022\uffda\023" +
    "\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda" +
    "\032\uffda\033\uffda\034\uffda\035\uffda\036\uffda\037\uffda\001" +
    "\002\000\040\014\uffdb\022\uffdb\023\uffdb\024\uffdb\025\075" +
    "\026\102\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034" +
    "\uffdb\035\uffdb\036\uffdb\037\uffdb\001\002\000\040\014\uffe4" +
    "\022\uffe4\023\077\024\071\025\075\026\102\027\106\030" +
    "\104\031\073\032\074\033\103\034\072\035\076\036\uffe4" +
    "\037\uffe4\001\002\000\036\014\125\023\077\024\071\025" +
    "\075\026\102\027\106\030\104\031\073\032\074\033\103" +
    "\034\072\035\076\036\070\037\105\001\002\000\040\014" +
    "\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\036" +
    "\uffd8\037\uffd8\001\002\000\040\014\uffd3\022\uffd3\023\uffd3" +
    "\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\001\002" +
    "\000\040\014\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\037\uffd4\001\002\000\040\014\uffe2\022" +
    "\uffe2\023\077\024\071\025\075\026\102\027\106\030\104" +
    "\031\073\032\074\033\103\034\072\035\076\036\uffe2\037" +
    "\uffe2\001\002\000\022\002\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\132\015\uffe8\016\uffe8\001\002\000\014\006" +
    "\022\007\026\010\020\011\011\015\021\001\002\000\022" +
    "\002\uffe9\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\015" +
    "\uffe9\016\uffe9\001\002\000\016\004\067\005\061\006\022" +
    "\013\064\024\063\040\062\001\002\000\022\002\uffec\006" +
    "\uffec\007\uffec\010\uffec\011\uffec\012\uffec\015\uffec\016\uffec" +
    "\001\002\000\036\022\137\023\077\024\071\025\075\026" +
    "\102\027\106\030\104\031\073\032\074\033\103\034\072" +
    "\035\076\036\070\037\105\001\002\000\022\002\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\015\uffeb\016\uffeb" +
    "\001\002\000\016\004\067\005\061\006\022\013\064\024" +
    "\063\040\062\001\002\000\014\006\022\007\026\010\020" +
    "\011\011\015\021\001\002\000\022\002\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\015\uffe6\016\uffe6\001\002" +
    "\000\036\014\144\023\077\024\071\025\075\026\102\027" +
    "\106\030\104\031\073\032\074\033\103\034\072\035\076" +
    "\036\070\037\105\001\002\000\014\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\015\uffe5\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\142\000\006\003\004\015\003\001\001\000\024\004" +
    "\026\005\013\006\006\007\016\010\012\011\007\016\024" +
    "\021\022\025\011\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\023\056\001\001\000\020\004\053\005\013\006" +
    "\006\007\016\010\012\011\007\025\011\001\001\000\002" +
    "\001\001\000\006\017\034\020\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\030\001\001\000\016" +
    "\005\027\006\006\007\016\010\012\011\007\025\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\027\006\006" +
    "\007\016\010\012\011\007\025\011\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\130\006\006\007\016" +
    "\010\012\011\007\025\011\001\001\000\006\012\064\025" +
    "\065\001\001\000\002\001\001\000\006\012\127\025\065" +
    "\001\001\000\002\001\001\000\006\012\123\025\065\001" +
    "\001\000\006\013\106\014\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\122\025\065\001\001\000" +
    "\006\012\121\025\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\120\025\065\001" +
    "\001\000\002\001\001\000\006\012\115\025\065\001\001" +
    "\000\002\001\001\000\006\012\114\025\065\001\001\000" +
    "\006\012\113\025\065\001\001\000\002\001\001\000\006" +
    "\012\112\025\065\001\001\000\006\012\111\025\065\001" +
    "\001\000\006\012\110\025\065\001\001\000\006\012\107" +
    "\025\065\001\001\000\006\013\106\014\100\001\001\000" +
    "\006\013\106\014\100\001\001\000\006\013\106\014\100" +
    "\001\001\000\006\013\106\014\100\001\001\000\006\013" +
    "\106\014\100\001\001\000\006\013\106\014\100\001\001" +
    "\000\006\013\106\014\100\001\001\000\006\012\117\025" +
    "\065\001\001\000\006\013\106\014\100\001\001\000\006" +
    "\013\106\014\100\001\001\000\006\013\106\014\100\001" +
    "\001\000\006\013\106\014\100\001\001\000\006\013\106" +
    "\014\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\106\014\100\001\001\000\002" +
    "\001\001\000\016\005\132\006\006\007\016\010\012\011" +
    "\007\025\011\001\001\000\002\001\001\000\006\012\135" +
    "\025\065\001\001\000\002\001\001\000\006\013\106\014" +
    "\100\001\001\000\002\001\001\000\006\012\142\025\065" +
    "\001\001\000\016\005\141\006\006\007\016\010\012\011" +
    "\007\025\011\001\001\000\002\001\001\000\006\013\106" +
    "\014\100\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    // Redefinition of error functions
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // id ::= ID SO ID SC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // id ::= ID SO INT SC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // id ::= ID 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // mageq ::= EQ_MAJ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*mageq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // mageq ::= MAJ_EQ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*mageq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // mineq ::= EQ_MIN 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*mineq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // mineq ::= MIN_EQ 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*mineq*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= MINUS DOUBLE 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= MINUS INT 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= DOUBLE 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= INT 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= id 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= RO exp RC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp DIV exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp STAR exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= exp MINUS exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= exp PLUS exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp mageq exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp mineq exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp MAJ exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp MIN exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp EQ EQ exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= NOT exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp OR exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp AND exp 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // while_condition ::= RO exp RC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*while_condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // while ::= WHILE while_condition stmt 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*while*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_condition ::= RO exp RC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*if_condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if ::= IF if_condition stmt 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if ::= IF if_condition stmt ELSE stmt 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*if*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // print ::= PRINT id S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment ::= id EQ exp S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assignment ::= id S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*assignment*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= BO error BC 
            { 
              Object RESULT = null;
		 System.err.println("Missing ; before }"); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= BO stmt_list BC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= print 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= assignment 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= while 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= if 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_list ::= stmt 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_list ::= stmt_list stmt 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*stmt_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // array ::= array SO INT SC 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // array ::= 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*array*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // var ::= ID array 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_list ::= var_list CM var 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_list ::= var 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*var_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // type ::= DOUBLE_TYPE 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // type ::= INT_TYPE 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= error S 
            { 
              Object RESULT = null;
		 System.err.println("Error in declaration"); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= type var_list S 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_list ::= 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // decl_list ::= decl_list decl 
            { 
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*decl_list*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= decl_list stmt_list 
            { 
              Object RESULT = null;
		 System.out.println("Programm correctly recognized"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

