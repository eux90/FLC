
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun May 14 16:34:23 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.10k generated parser.
  * @version Sun May 14 16:34:23 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\003\003\000\002\002\004\000\002\004" +
    "\005\000\002\005\004\000\002\005\002\000\002\015\003" +
    "\000\002\015\003\000\002\007\004\000\002\006\006\000" +
    "\002\010\005\000\002\011\005\000\002\011\003\000\002" +
    "\013\005\000\002\013\003\000\002\014\003\000\002\014" +
    "\006\000\002\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\006\004\ufffd\011\ufffd\001\002\000\004\002" +
    "\001\001\002\000\004\002\040\001\002\000\006\004\010" +
    "\011\014\001\002\000\006\012\034\013\035\001\002\000" +
    "\014\006\024\007\ufff3\010\ufff3\012\ufff3\013\ufff3\001\002" +
    "\000\010\002\ufffc\004\ufffc\011\ufffc\001\002\000\010\002" +
    "\ufffe\004\ufffe\011\ufffe\001\002\000\006\002\ufffd\004\ufffd" +
    "\001\002\000\004\004\010\001\002\000\010\002\ufffb\004" +
    "\ufffb\011\ufffb\001\002\000\006\010\ufff4\013\ufff4\001\002" +
    "\000\006\010\021\013\020\001\002\000\006\002\ufff8\004" +
    "\ufff8\001\002\000\004\004\010\001\002\000\006\010\ufff5" +
    "\013\ufff5\001\002\000\006\002\uffff\004\010\001\002\000" +
    "\006\004\010\005\026\001\002\000\006\007\ufff1\010\ufff1" +
    "\001\002\000\006\007\ufff0\010\ufff0\001\002\000\006\007" +
    "\031\010\032\001\002\000\006\007\ufff6\010\ufff6\001\002" +
    "\000\012\007\ufff2\010\ufff2\012\ufff2\013\ufff2\001\002\000" +
    "\006\004\010\005\026\001\002\000\006\007\ufff7\010\ufff7" +
    "\001\002\000\004\004\010\001\002\000\010\002\ufffa\004" +
    "\ufffa\011\ufffa\001\002\000\006\010\021\013\037\001\002" +
    "\000\010\002\ufff9\004\ufff9\011\ufff9\001\002\000\004\002" +
    "\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\036\000\010\003\004\004\003\005\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\006\014\007\010" +
    "\010\012\014\006\015\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\022\001\001\000\006\013\016\014\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\021\001\001\000\002\001\001\000" +
    "\012\006\014\007\010\014\006\015\011\001\001\000\010" +
    "\011\026\012\027\014\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\032\014\024\001\001\000\002\001" +
    "\001\000\006\013\035\014\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


  public void report_error(String message, Object info){
    StringBuffer m = new StringBuffer(message);
    if(info instanceof Symbol){
      if(((Symbol)info).left != 1 && ((Symbol)info).right != -1){
        int line = (((Symbol)info).left)+1;
        int column = (((Symbol)info).right)+1;
        m.append("(line "+ line + ", column" + column + ")");
      }
    }
    System.err.println(m);
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // argument ::= V 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // argument ::= predicate 
            { parser.Tree.reduce(1,"argument",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*argument*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // predicate ::= A RO argument_l RC 
            { parser.Tree.reduce(4,"predicate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // predicate ::= A 
            { parser.Tree.reduce(1,"predicate",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*predicate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // predicate_l ::= predicate 
            { parser.Tree.reduce(1,"predicate_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*predicate_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // predicate_l ::= predicate_l C predicate 
            { parser.Tree.reduce(3,"predicate_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*predicate_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // argument_l ::= argument 
            { parser.Tree.reduce(1,"argument_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*argument_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // argument_l ::= argument_l C argument 
            { parser.Tree.reduce(3,"argument_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*argument_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // interrogation ::= IS predicate_l D 
            { parser.Tree.reduce(3,"interrogation",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*interrogation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rule ::= predicate RS predicate_l D 
            { parser.Tree.reduce(4,"rule",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*rule*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fact ::= predicate D 
            { parser.Tree.reduce(2,"fact",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*fact*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // element ::= rule 
            { parser.Tree.reduce(1,"element",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // element ::= fact 
            { parser.Tree.reduce(1,"element",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*element*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // section ::= 
            { parser.Tree.reduce(0,"section",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*section*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // section ::= section element 
            { parser.Tree.reduce(2,"section",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*section*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= section interrogation section 
            { parser.Tree.reduce(3,"program",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog_start EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog_start ::= program 
            { parser.Tree.reduce(1,"prog_start",1);
              Object RESULT = null;
		 System.out.println("Parsed Correctly"); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog_start*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

