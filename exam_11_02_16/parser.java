
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jul 02 18:33:01 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.io.*;
import java.lang.Math.*;

/** CUP v0.10k generated parser.
  * @version Sun Jul 02 18:33:01 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\003\006\000\002\007" +
    "\003\000\002\007\006\000\002\010\002\000\002\010\005" +
    "\000\002\004\002\000\002\004\005\000\002\014\002\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\015\002\000\002\013\011\000\002\017\004\000\002\017" +
    "\004\000\002\006\010\000\002\022\005\000\002\022\007" +
    "\000\002\023\005\000\002\011\011\000\002\020\003\000" +
    "\002\020\005\000\002\012\010\000\002\016\012\000\002" +
    "\016\011\000\002\024\005\000\002\024\004\000\002\024" +
    "\005\000\002\024\005\000\002\024\005\000\002\021\004" +
    "\000\002\021\004\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\010\023\ufffd\024\ufffd\033\ufffd\001\002\000" +
    "\010\023\135\024\136\033\uffff\001\002\000\004\002\134" +
    "\001\002\000\004\033\007\001\002\000\004\025\011\001" +
    "\002\000\012\002\ufffb\026\ufffb\027\ufffb\030\ufffb\001\002" +
    "\000\006\014\012\015\013\001\002\000\004\035\023\001" +
    "\002\000\004\035\022\001\002\000\004\005\015\001\002" +
    "\000\006\014\012\015\013\001\002\000\004\005\017\001" +
    "\002\000\006\014\012\015\013\001\002\000\004\006\021" +
    "\001\002\000\012\002\ufff4\026\ufff4\027\ufff4\030\ufff4\001" +
    "\002\000\010\005\ufff2\006\ufff2\013\ufff2\001\002\000\010" +
    "\005\ufff3\006\ufff3\013\ufff3\001\002\000\012\002\000\026" +
    "\ufff9\027\ufff9\030\ufff9\001\002\000\010\026\ufff5\027\ufff5" +
    "\030\ufff5\001\002\000\012\002\ufffa\026\ufffa\027\ufffa\030" +
    "\ufffa\001\002\000\010\026\034\027\030\030\033\001\002" +
    "\000\004\012\115\001\002\000\012\002\ufff8\026\ufff8\027" +
    "\ufff8\030\ufff8\001\002\000\012\002\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\001\002\000\012\014\051\015\052\022\050\036" +
    "\054\001\002\000\010\014\012\015\013\036\037\001\002" +
    "\000\012\002\ufff6\026\ufff6\027\ufff6\030\ufff6\001\002\000" +
    "\004\005\043\001\002\000\004\007\041\001\002\000\006" +
    "\005\uffec\006\uffec\001\002\000\004\036\042\001\002\000" +
    "\006\005\uffeb\006\uffeb\001\002\000\010\014\012\015\013" +
    "\036\037\001\002\000\004\005\045\001\002\000\010\014" +
    "\012\015\013\036\037\001\002\000\004\006\047\001\002" +
    "\000\012\002\uffed\026\uffed\027\uffed\030\uffed\001\002\000" +
    "\012\014\051\015\052\022\050\036\054\001\002\000\004" +
    "\035\113\001\002\000\004\035\112\001\002\000\006\016" +
    "\107\017\106\001\002\000\004\007\104\001\002\000\010" +
    "\020\056\021\060\032\057\001\002\000\012\014\051\015" +
    "\052\022\050\036\054\001\002\000\004\026\063\001\002" +
    "\000\012\014\051\015\052\022\050\036\054\001\002\000" +
    "\010\020\056\021\uffe7\032\uffe7\001\002\000\006\026\073" +
    "\031\072\001\002\000\010\014\012\015\013\036\037\001" +
    "\002\000\004\005\065\001\002\000\010\014\012\015\013" +
    "\036\037\001\002\000\004\005\067\001\002\000\010\014" +
    "\012\015\013\036\037\001\002\000\004\006\071\001\002" +
    "\000\006\026\uffe8\031\uffe8\001\002\000\004\006\102\001" +
    "\002\000\010\014\012\015\013\036\037\001\002\000\004" +
    "\005\075\001\002\000\010\014\012\015\013\036\037\001" +
    "\002\000\004\005\077\001\002\000\010\014\012\015\013" +
    "\036\037\001\002\000\004\006\101\001\002\000\006\026" +
    "\uffe9\031\uffe9\001\002\000\012\002\uffea\026\uffea\027\uffea" +
    "\030\uffea\001\002\000\010\020\uffe5\021\uffe5\032\uffe5\001" +
    "\002\000\004\036\105\001\002\000\014\016\uffe0\017\uffe0" +
    "\020\uffe0\021\uffe0\032\uffe0\001\002\000\010\014\051\015" +
    "\052\036\054\001\002\000\010\014\051\015\052\036\054" +
    "\001\002\000\010\020\uffe4\021\uffe4\032\uffe4\001\002\000" +
    "\010\020\uffe3\021\uffe3\032\uffe3\001\002\000\014\016\uffe1" +
    "\017\uffe1\020\uffe1\021\uffe1\032\uffe1\001\002\000\014\016" +
    "\uffe2\017\uffe2\020\uffe2\021\uffe2\032\uffe2\001\002\000\010" +
    "\020\uffe6\021\uffe6\032\uffe6\001\002\000\004\036\117\001" +
    "\002\000\004\005\130\001\002\000\004\004\126\001\002" +
    "\000\006\005\121\013\122\001\002\000\004\036\117\001" +
    "\002\000\004\036\123\001\002\000\004\006\124\001\002" +
    "\000\012\002\ufff1\026\ufff1\027\ufff1\030\ufff1\001\002\000" +
    "\006\005\ufff0\013\ufff0\001\002\000\006\014\012\015\013" +
    "\001\002\000\006\005\uffee\013\uffee\001\002\000\004\036" +
    "\117\001\002\000\004\005\132\001\002\000\004\036\117" +
    "\001\002\000\006\005\uffef\013\uffef\001\002\000\004\002" +
    "\001\001\002\000\004\006\141\001\002\000\004\006\137" +
    "\001\002\000\006\023\ufffd\033\ufffd\001\002\000\006\023" +
    "\135\033\ufffe\001\002\000\010\023\ufffc\024\ufffc\033\ufffc" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\137\000\010\003\004\007\005\010\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\007\001\001\000\004\004\023\001\001\000\004\017" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\015\001\001\000\002\001\001\000" +
    "\004\017\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\024\001" +
    "\001\000\006\005\025\015\026\001\001\000\002\001\001" +
    "\000\010\006\030\011\031\012\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\052" +
    "\024\054\001\001\000\006\017\037\020\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\037\020\043\001\001\000\002\001\001\000\006\017\037" +
    "\020\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\052\024\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\021\052\024\102\001\001\000\004\016\061" +
    "\001\001\000\006\021\052\024\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\037\020\063\001\001" +
    "\000\002\001\001\000\006\017\037\020\065\001\001\000" +
    "\002\001\001\000\006\017\037\020\067\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\037\020\073\001\001\000\002\001\001\000\006\017\037" +
    "\020\075\001\001\000\002\001\001\000\006\017\037\020" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\110\001\001\000\004\021\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\117\023\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\126\001\001\000\002\001\001\000\004\023\130\001\001" +
    "\000\002\001\001\000\004\023\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\137\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



  // ****** HASHMAP EXAMPLE ****** METHODS: put, get, entrySet
  public HashMap<String, HashMap<String, Integer>> vars = new HashMap<String, HashMap<String, Integer>>();
  // ****** HASHMAP EXAMPLE ****** METHODS: add, get
  public ArrayList<String> dummy2 = new ArrayList<String>();

  public int getLine() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).left+1;
      }else return -1;
  }
  // Return the column number of actual symbol
  public int getColumn() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).right+1;
      }else return -1;
  }

  public Object stack ( int position){
    // returns the object at the specified position // from the top (tos) of the stack
    return(((Symbol)stack.elementAt(tos+position)).value);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    // print line
    void Pl(String s){
      System.out.println(s);
      return;
    }
    // print
    void P(String s){
      System.out.print(s);
      return;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_int ::= NAME DT NAME 
            { parser.Tree.reduce(3,"exp_int",0);
              Integer RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
              HashMap<String, Integer> first = (HashMap)parser.vars.get(n1);
              RESULT = first.get(n2);
              
              CUP$parser$result = new java_cup.runtime.Symbol(15/*exp_int*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_int ::= MINUS INT 
            { parser.Tree.reduce(2,"exp_int",0);
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = -i; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*exp_int*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_int ::= PLUS INT 
            { parser.Tree.reduce(2,"exp_int",0);
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*exp_int*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp_int DIF exp_int 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = !(a.equals(b)); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp_int EQUAL exp_int 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a.equals(b); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp AND exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (a && b); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= NOT exp 
            { parser.Tree.reduce(2,"exp",0);
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = !a; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp OR exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (a || b); 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // move_l ::= MOVE move_item CM move_item CM move_item S 
            { parser.Tree.reduce(7,"move_l",0);
              Integer[] RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer m3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

              RESULT = new Integer[3];
              RESULT[0] = m1;
              RESULT[1] = m2;
              RESULT[2] = m3;
        
              CUP$parser$result = new java_cup.runtime.Symbol(12/*move_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // move_l ::= move_l MOVE move_item CM move_item CM move_item S 
            { parser.Tree.reduce(8,"move_l",0);
              Integer[] RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Integer[] l = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer m3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                  l[0] = l[0] + m1;
                  l[1] = l[1] + m2;
                  l[2] = l[2] + m3;
                  RESULT = l;
              
              CUP$parser$result = new java_cup.runtime.Symbol(12/*move_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // when_inst ::= WHEN exp THEN move_l DONE S 
            { parser.Tree.reduce(6,"when_inst",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer[] l = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

                          if(e == true){
                            Integer[] p = new Integer[3];
                            p = (Integer[])parser.stack(-6);
                            p[0] += l[0];
                            p[1] += l[1];
                            p[2] += l[2];
                            Pl(Arrays.toString(p));
                          }

                      
              CUP$parser$result = new java_cup.runtime.Symbol(8/*when_inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // move_item ::= NAME DT NAME 
            { parser.Tree.reduce(3,"move_item",0);
              Integer RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    HashMap<String, Integer> first = (HashMap)parser.vars.get(n1);
                    RESULT = first.get(n2);
               
              CUP$parser$result = new java_cup.runtime.Symbol(14/*move_item*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // move_item ::= coordinate 
            { parser.Tree.reduce(1,"move_item",0);
              Integer RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*move_item*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // move_inst ::= MOVE move_item CM move_item CM move_item S 
            { parser.Tree.reduce(7,"move_inst",0);
              Object RESULT = null;
		int m1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int m1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer m1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int m2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int m2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer m2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int m3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int m3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer m3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                  Integer[] p = new Integer[3];
                  p = (Integer[])parser.stack(-7);
                  p[0] += m1;
                  p[1] += m2;
                  p[2] += m3;
                  Pl(Arrays.toString(p));
                  
              CUP$parser$result = new java_cup.runtime.Symbol(7/*move_inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // attribute ::= NAME CL coordinate 
            { parser.Tree.reduce(3,"attribute",0);
              Object[] RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Object[2];
                        RESULT[0] = (String)n;
                        RESULT[1] = (Integer)c;
   
              CUP$parser$result = new java_cup.runtime.Symbol(17/*attribute*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // attribute_l ::= attribute CM attribute CM attribute 
            { parser.Tree.reduce(5,"attribute_l",0);
              HashMap RESULT = null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object[] a1 = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object[] a2 = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int a3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object[] a3 = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                RESULT = new HashMap<String, Integer>();
                RESULT.put((String)a1[0], (Integer)a1[1]);
                RESULT.put((String)a2[0], (Integer)a2[1]);
                RESULT.put((String)a3[0], (Integer)a3[1]);
               
              CUP$parser$result = new java_cup.runtime.Symbol(16/*attribute_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // attribute_l ::= attribute_l CM attribute 
            { parser.Tree.reduce(3,"attribute_l",0);
              HashMap RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		HashMap l = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object[] a = (Object[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      l.put((String)a[0], (Integer)a[1]);
                      RESULT = l;
                      
              CUP$parser$result = new java_cup.runtime.Symbol(16/*attribute_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // var_inst ::= VAR BO attribute_l BC NAME S 
            { parser.Tree.reduce(6,"var_inst",0);
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		HashMap l = (HashMap)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        parser.vars.put(n, l);
   
              CUP$parser$result = new java_cup.runtime.Symbol(4/*var_inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // coordinate ::= MINUS INT 
            { parser.Tree.reduce(2,"coordinate",0);
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                  RESULT = -i;

                
              CUP$parser$result = new java_cup.runtime.Symbol(13/*coordinate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // coordinate ::= PLUS INT 
            { parser.Tree.reduce(2,"coordinate",0);
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                  RESULT = i;
                  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*coordinate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // start_inst ::= START coordinate CM coordinate CM coordinate S 
            { parser.Tree.reduce(7,"start_inst",0);
              Integer[] RESULT = null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer c1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer c2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer c3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                              RESULT = new Integer[3];
                                              RESULT[0] = c1;
                                              RESULT[1] = c2;
                                              RESULT[2] = c3;

                                              
              CUP$parser$result = new java_cup.runtime.Symbol(9/*start_inst*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Integer[] RESULT = null;
		 RESULT = new Integer[3];
            RESULT = (Integer[])parser.stack(0);  
              CUP$parser$result = new java_cup.runtime.Symbol(11/*NT1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // commands ::= NT1 when_inst 
            { parser.Tree.reduce(2,"commands",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // commands ::= NT1 move_inst 
            { parser.Tree.reduce(2,"commands",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // commands ::= NT1 var_inst 
            { parser.Tree.reduce(2,"commands",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Integer[] RESULT = null;
		 RESULT = new Integer[3];
          RESULT = (Integer[])parser.stack(-1); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*NT0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // commands_l ::= commands_l NT0 commands 
            { parser.Tree.reduce(3,"commands_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*commands_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // commands_l ::= 
            { parser.Tree.reduce(0,"commands_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*commands_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // code_l ::= code_l CODE S 
            { parser.Tree.reduce(3,"code_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*code_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // code_l ::= 
            { parser.Tree.reduce(0,"code_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*code_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= code_l DATE S code_l 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= code_l 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP start_inst commands_l 
            { parser.Tree.reduce(4,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

