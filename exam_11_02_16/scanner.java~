/* The following code was generated by JFlex 1.4.1 on 02/07/17 18.32 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 02/07/17 18.32 from the specification file
 * <tt>scanner.jflex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int sect2 = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\2\0\1\2\22\0\1\3\1\50\1\0\1\10"+
    "\1\22\1\7\5\0\1\42\1\43\1\11\1\46\1\23\1\4\1\14"+
    "\1\12\1\16\1\13\1\17\1\20\1\21\1\15\1\5\1\24\1\25"+
    "\1\0\1\47\1\0\1\22\1\0\1\30\2\6\1\41\1\35\2\6"+
    "\1\37\4\6\1\32\1\40\1\33\2\6\1\31\1\26\1\27\1\6"+
    "\1\34\1\36\3\6\6\0\32\6\1\44\1\0\1\45\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\3\1\1\3\5\1\1\4\2\5"+
    "\1\6\1\7\1\10\11\6\1\11\1\12\1\13\1\14"+
    "\1\15\2\1\15\0\5\6\1\16\4\6\1\17\1\20"+
    "\7\0\2\6\1\21\1\6\1\22\1\6\1\23\1\6"+
    "\2\0\1\3\2\0\1\6\1\24\1\25\1\26\1\27"+
    "\1\30\3\0\1\31\1\0\1\30\2\0\1\30\14\0"+
    "\1\30\1\32\14\0\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\122\0\173\0\244\0\315\0\366"+
    "\0\u011f\0\u0148\0\u0171\0\u019a\0\u01c3\0\u01ec\0\122\0\122"+
    "\0\u0215\0\u023e\0\122\0\122\0\u0267\0\u0290\0\u02b9\0\u02e2"+
    "\0\u030b\0\u0334\0\u035d\0\u0386\0\u03af\0\122\0\122\0\122"+
    "\0\122\0\122\0\u03d8\0\u0401\0\u042a\0\u0453\0\u047c\0\u04a5"+
    "\0\u04ce\0\u04f7\0\244\0\u0520\0\u0549\0\u0572\0\315\0\u019a"+
    "\0\u059b\0\u05c4\0\u05ed\0\u0616\0\u063f\0\u0668\0\u023e\0\u0691"+
    "\0\u06ba\0\u06e3\0\u070c\0\122\0\122\0\u0735\0\u075e\0\u0787"+
    "\0\u07b0\0\u07d9\0\u0802\0\u082b\0\u0854\0\u087d\0\u023e\0\u08a6"+
    "\0\u023e\0\u08cf\0\u023e\0\u08f8\0\u0921\0\u094a\0\u04ce\0\u0973"+
    "\0\u099c\0\u09c5\0\u023e\0\u023e\0\u023e\0\u023e\0\u09ee\0\u0a17"+
    "\0\u0a40\0\u0a69\0\u023e\0\u0a92\0\u094a\0\u0abb\0\u0ae4\0\u0b0d"+
    "\0\u0b36\0\u0b5f\0\u0b88\0\u0bb1\0\u0bda\0\u0c03\0\u0c2c\0\u0c55"+
    "\0\u0c7e\0\u0ca7\0\u0cd0\0\u0cf9\0\122\0\u0d22\0\u0d4b\0\u0d74"+
    "\0\u0d9d\0\u0dc6\0\u0def\0\u0e18\0\u0e41\0\u0e6a\0\u0e93\0\u0ebc"+
    "\0\u0ee5\0\u0f0e\0\122";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\14\2\7\1\14"+
    "\1\7\1\3\1\16\1\3\1\17\24\3\1\4\1\5"+
    "\1\4\1\20\1\21\1\22\2\3\1\23\10\21\1\3"+
    "\1\16\1\24\1\17\1\25\1\26\1\27\1\22\1\30"+
    "\1\31\1\32\1\22\1\33\1\22\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\52\0\1\4"+
    "\55\0\1\45\13\0\1\46\3\0\14\45\13\0\1\47"+
    "\1\50\4\0\2\47\1\50\1\47\2\50\1\47\1\50"+
    "\36\0\1\51\51\0\1\52\44\0\1\53\5\0\1\54"+
    "\1\53\1\50\1\53\2\0\1\53\34\0\1\55\1\50"+
    "\1\45\3\0\1\47\1\56\1\50\1\47\1\57\1\50"+
    "\1\47\1\50\1\46\3\0\14\45\13\0\1\47\1\50"+
    "\1\45\3\0\2\47\1\50\1\47\2\50\1\47\1\50"+
    "\1\46\3\0\14\45\13\0\1\60\1\57\4\0\2\60"+
    "\1\57\1\60\2\57\1\60\1\57\52\0\1\61\31\0"+
    "\2\21\4\0\10\21\33\0\2\62\1\22\3\0\10\62"+
    "\4\0\14\22\13\0\2\62\1\22\3\0\10\62\4\0"+
    "\1\22\1\63\12\22\13\0\2\62\1\22\3\0\10\62"+
    "\4\0\11\22\1\64\2\22\13\0\2\62\1\22\3\0"+
    "\10\62\4\0\12\22\1\65\1\22\13\0\2\62\1\22"+
    "\3\0\10\62\4\0\5\22\1\66\6\22\13\0\2\62"+
    "\1\22\3\0\10\62\4\0\3\22\1\67\10\22\13\0"+
    "\2\62\1\22\3\0\10\62\4\0\2\22\1\70\11\22"+
    "\13\0\2\62\1\22\3\0\10\62\4\0\11\22\1\71"+
    "\2\22\13\0\2\62\1\22\3\0\10\62\4\0\5\22"+
    "\1\72\6\22\13\0\2\62\1\22\3\0\10\62\4\0"+
    "\5\22\1\73\6\22\56\0\1\74\50\0\1\75\7\0"+
    "\1\76\17\0\14\76\31\0\1\77\32\0\1\53\1\0"+
    "\1\45\3\0\2\53\1\0\1\53\2\0\1\53\1\0"+
    "\1\46\3\0\14\45\13\0\1\53\5\0\2\53\1\0"+
    "\1\53\2\0\1\53\37\0\1\100\51\0\1\11\44\0"+
    "\1\53\1\0\1\45\3\0\2\53\6\0\1\46\3\0"+
    "\14\45\13\0\1\53\1\0\1\45\3\0\2\53\1\101"+
    "\1\53\2\0\1\53\1\0\1\46\3\0\14\45\13\0"+
    "\1\102\1\0\1\45\3\0\2\102\1\103\1\53\2\103"+
    "\1\102\1\104\1\46\3\0\14\45\7\0\1\61\1\4"+
    "\1\5\46\61\4\0\2\62\4\0\10\62\33\0\2\62"+
    "\1\22\3\0\10\62\4\0\2\22\1\105\11\22\13\0"+
    "\2\62\1\22\3\0\10\62\4\0\7\22\1\106\4\22"+
    "\13\0\2\62\1\22\3\0\10\62\4\0\13\22\1\107"+
    "\13\0\2\62\1\22\3\0\10\62\4\0\6\22\1\110"+
    "\5\22\13\0\2\62\1\22\3\0\10\62\4\0\3\22"+
    "\1\111\10\22\13\0\2\62\1\22\3\0\10\62\4\0"+
    "\7\22\1\112\4\22\13\0\2\62\1\22\3\0\10\62"+
    "\4\0\1\22\1\113\12\22\13\0\2\62\1\22\3\0"+
    "\10\62\4\0\12\22\1\114\1\22\15\0\1\115\17\0"+
    "\14\115\31\0\1\116\35\0\1\117\60\0\1\120\1\121"+
    "\34\0\1\53\1\0\1\45\3\0\2\53\1\0\1\53"+
    "\4\0\1\46\3\0\14\45\13\0\1\53\5\0\2\53"+
    "\1\0\1\53\37\0\1\53\5\0\1\53\42\0\2\62"+
    "\1\22\3\0\10\62\4\0\3\22\1\122\10\22\13\0"+
    "\2\62\1\22\3\0\10\62\4\0\12\22\1\123\1\22"+
    "\13\0\2\62\1\22\3\0\10\62\4\0\7\22\1\124"+
    "\4\22\13\0\2\62\1\22\3\0\10\62\4\0\12\22"+
    "\1\125\1\22\13\0\2\62\1\22\3\0\10\62\4\0"+
    "\7\22\1\126\4\22\15\0\1\127\17\0\14\127\31\0"+
    "\1\130\51\0\1\131\50\0\1\132\31\0\2\62\1\22"+
    "\3\0\10\62\4\0\1\22\1\133\12\22\15\0\1\134"+
    "\17\0\14\134\31\0\1\135\42\0\1\136\40\0\1\137"+
    "\52\0\1\140\17\0\14\140\21\0\1\141\50\0\1\142"+
    "\1\0\1\143\1\0\1\143\40\0\1\144\17\0\14\144"+
    "\32\0\1\145\50\0\1\146\50\0\1\147\33\0\1\150"+
    "\17\0\14\150\14\0\1\151\4\0\1\152\2\0\1\151"+
    "\1\153\1\0\2\151\33\0\1\154\5\0\1\152\1\0"+
    "\1\152\40\0\1\154\5\0\1\152\1\0\1\152\1\0"+
    "\1\153\40\0\1\155\17\0\14\155\23\0\1\152\40\0"+
    "\2\156\4\0\10\156\33\0\1\156\7\0\1\156\41\0"+
    "\1\156\4\0\10\156\53\0\1\157\30\0\1\160\7\0"+
    "\1\161\41\0\1\162\5\0\1\163\1\0\1\162\1\0"+
    "\3\162\33\0\1\162\5\0\3\162\1\0\1\162\1\164"+
    "\55\0\1\165\50\0\1\166\50\0\1\167\30\0\1\170"+
    "\5\0\3\170\1\0\2\170\44\0\1\170\2\0\1\171"+
    "\1\170\35\0\1\170\5\0\1\170\1\172\1\170\1\0"+
    "\1\170\36\0\2\173\4\0\10\173\34\0\1\173\4\0"+
    "\2\173\1\0\5\173\33\0\1\173\5\0\3\173\1\0"+
    "\4\173\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3895];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\12\1\2\11\2\1\2\11\11\1\5\11"+
    "\2\1\15\0\12\1\2\11\7\0\10\1\2\0\1\1"+
    "\2\0\6\1\3\0\1\1\1\0\1\1\2\0\1\1"+
    "\14\0\1\11\1\1\14\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[123];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private static final boolean _DEBUG = true;

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);

  }
  private Symbol plrs(int type, String message){
    if(_DEBUG){
      System.out.println(message + " " + yytext());
    }
    return symbol(type);
  }
  private Symbol plrs(int type, Object value, String message){
    if(_DEBUG){
      System.out.println(message + " " + yytext());
    }
    return symbol(type, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 24: 
          { return plrs(sym.CODE, "CODE");
          }
        case 27: break;
        case 17: 
          { return plrs(sym.AND, "AND");
          }
        case 28: break;
        case 26: 
          { return plrs(sym.DATE, "DATE");
          }
        case 29: break;
        case 25: 
          { return plrs(sym.START, "START");
          }
        case 30: break;
        case 12: 
          { return plrs(sym.BC, "BC");
          }
        case 31: break;
        case 22: 
          { return plrs(sym.WHEN, "WHEN");
          }
        case 32: break;
        case 8: 
          { return plrs(sym.CL, "CL");
          }
        case 33: break;
        case 13: 
          { return plrs(sym.DT, "DT");
          }
        case 34: break;
        case 10: 
          { return plrs(sym.CM, "CM");
          }
        case 35: break;
        case 14: 
          { return plrs(sym.OR, "OR");
          }
        case 36: break;
        case 20: 
          { return plrs(sym.THEN, "THEN");
          }
        case 37: break;
        case 16: 
          { return plrs(sym.DIF, "DIF");
          }
        case 38: break;
        case 19: 
          { return plrs(sym.NOT, "NOT");
          }
        case 39: break;
        case 18: 
          { return plrs(sym.VAR, "VAR");
          }
        case 40: break;
        case 7: 
          { return plrs(sym.MINUS, "MINUS");
          }
        case 41: break;
        case 2: 
          { ;
          }
        case 42: break;
        case 9: 
          { return plrs(sym.PLUS, "PLUS");
          }
        case 43: break;
        case 23: 
          { return plrs(sym.DONE, "DONE");
          }
        case 44: break;
        case 11: 
          { return plrs(sym.BO, "BO");
          }
        case 45: break;
        case 4: 
          { return plrs(sym.S, "S");
          }
        case 46: break;
        case 5: 
          { return plrs(sym.INT, new Integer(yytext()), "INT");
          }
        case 47: break;
        case 1: 
          { System.out.println("SCANNER ERROR: " + yytext());
          }
        case 48: break;
        case 3: 
          { yybegin(sect2); return plrs(sym.SEP, "SEP");
          }
        case 49: break;
        case 6: 
          { return plrs(sym.NAME, new String(yytext()), "NAME");
          }
        case 50: break;
        case 21: 
          { return plrs(sym.MOVE, "MOVE");
          }
        case 51: break;
        case 15: 
          { return plrs(sym.EQUAL, "EQUAL");
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        scanner scanner = null;
        try {
          scanner = new scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
