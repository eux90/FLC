/* The following code was generated by JFlex 1.4.1 on 01/07/17 9.52 */

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 01/07/17 9.52 from the specification file
 * <tt>scanner.jflex</tt>
 */
class scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int prog = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\2\0\1\2\22\0\1\3\1\33\1\17\1\30"+
    "\1\0\1\25\1\31\1\0\1\36\1\37\1\24\1\35\1\54\1\20"+
    "\1\0\1\56\1\11\1\4\1\13\1\6\1\10\1\12\1\7\1\21"+
    "\1\7\1\21\1\5\1\55\1\0\1\34\3\0\1\47\1\26\1\53"+
    "\1\26\1\45\1\46\5\26\1\50\5\26\1\43\1\51\1\42\1\44"+
    "\1\52\1\26\1\23\1\22\1\26\1\40\1\0\1\41\1\0\1\27"+
    "\1\0\1\14\13\26\1\15\2\26\1\16\12\26\1\0\1\32\uff83\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\5\1\1\3\1\1\3\4\1\5"+
    "\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\5\5\1\17\7\0\1\20\1\0\3\4"+
    "\1\21\1\22\1\23\5\5\7\0\5\5\13\0\1\24"+
    "\2\5\1\25\1\5\2\26\6\0\1\5\1\27\1\5"+
    "\10\0\2\30\3\0\3\5\13\0\3\30\3\5\16\0"+
    "\1\31\2\5\14\0\1\30\1\0\1\32\1\5\17\33"+
    "\1\30\1\34\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\136\0\215\0\274\0\353\0\u011a"+
    "\0\u0149\0\u0178\0\136\0\u01a7\0\u01d6\0\u0205\0\353\0\u0234"+
    "\0\136\0\136\0\u0263\0\u0292\0\136\0\u02c1\0\136\0\136"+
    "\0\136\0\136\0\136\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac"+
    "\0\136\0\u03db\0\u040a\0\u0439\0\u0468\0\u011a\0\u0497\0\u04c6"+
    "\0\136\0\u04f5\0\u0524\0\u0553\0\u0582\0\136\0\136\0\136"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa"+
    "\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872"+
    "\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea"+
    "\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0234\0\u0ad5\0\u0b04\0\u0234"+
    "\0\u0b33\0\u0b62\0\136\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0234\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96"+
    "\0\u0dc5\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e"+
    "\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086"+
    "\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe"+
    "\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376"+
    "\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee"+
    "\0\u151d\0\u154c\0\u157b\0\u0234\0\u15aa\0\u15d9\0\u1608\0\u1637"+
    "\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af"+
    "\0\u17de\0\u180d\0\136\0\u183c\0\u0234\0\u186b\0\u189a\0\u18c9"+
    "\0\136\0\u18f8\0\u1666\0\u1927\0\u1608\0\u1751\0\u1637\0\u1376"+
    "\0\u1780\0\u1695\0\u17de\0\u16f3\0\u1722\0\u183c\0\u0234\0\u1956";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\4\3\1\7\5\3"+
    "\1\10\5\3\1\11\2\3\1\12\24\3\1\13\1\14"+
    "\1\3\1\4\1\5\1\4\1\15\1\3\3\16\1\17"+
    "\2\16\3\20\1\10\1\21\1\16\2\20\1\22\1\11"+
    "\2\20\1\12\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\2\20\1\35\1\36\2\20"+
    "\1\37\1\20\1\40\1\41\1\13\1\14\60\0\1\4"+
    "\61\0\1\42\1\0\1\43\4\0\1\44\47\0\1\45"+
    "\52\0\17\46\1\47\37\46\14\0\3\50\3\0\2\50"+
    "\2\0\1\50\13\0\12\50\33\0\1\51\52\0\1\52"+
    "\36\0\1\53\1\0\1\54\4\16\1\55\5\0\1\16"+
    "\41\0\1\16\1\0\6\16\5\0\1\16\41\0\1\20"+
    "\1\0\11\20\2\0\3\20\2\0\2\20\12\0\12\20"+
    "\34\0\1\56\57\0\1\57\60\0\1\60\26\0\1\20"+
    "\1\0\11\20\2\0\3\20\2\0\2\20\12\0\1\20"+
    "\1\61\10\20\7\0\1\20\1\0\11\20\2\0\3\20"+
    "\2\0\2\20\12\0\10\20\1\62\1\20\7\0\1\20"+
    "\1\0\11\20\2\0\3\20\2\0\2\20\12\0\5\20"+
    "\1\63\4\20\7\0\1\20\1\0\11\20\2\0\3\20"+
    "\2\0\2\20\12\0\5\20\1\64\4\20\7\0\1\20"+
    "\1\0\11\20\2\0\3\20\2\0\2\20\12\0\5\20"+
    "\1\65\4\20\10\0\1\66\56\0\1\67\56\0\1\70"+
    "\56\0\1\71\56\0\1\72\65\0\3\73\3\0\2\73"+
    "\2\0\1\73\13\0\12\73\3\0\24\52\1\74\32\52"+
    "\4\0\1\16\1\66\6\16\5\0\1\16\41\0\1\16"+
    "\1\67\6\16\5\0\1\16\41\0\1\16\1\70\6\16"+
    "\5\0\1\16\41\0\1\20\1\0\11\20\2\0\3\20"+
    "\2\0\2\20\12\0\2\20\1\75\7\20\7\0\1\20"+
    "\1\0\11\20\2\0\3\20\2\0\2\20\12\0\5\20"+
    "\1\76\4\20\7\0\1\20\1\0\11\20\2\0\3\20"+
    "\2\0\2\20\12\0\6\20\1\77\3\20\7\0\1\20"+
    "\1\0\11\20\2\0\3\20\2\0\2\20\12\0\10\20"+
    "\1\100\1\20\7\0\1\20\1\0\11\20\2\0\3\20"+
    "\2\0\2\20\12\0\7\20\1\101\2\20\11\0\1\102"+
    "\1\0\1\103\1\0\1\103\50\0\1\104\1\0\1\104"+
    "\1\0\2\104\1\105\1\104\47\0\1\103\1\0\1\103"+
    "\1\0\4\103\47\0\1\106\1\0\1\106\1\0\2\106"+
    "\1\107\1\106\47\0\1\110\1\0\3\111\1\112\1\111"+
    "\1\113\5\0\1\111\51\0\3\114\3\0\2\114\2\0"+
    "\1\114\13\0\12\114\3\0\24\52\1\74\31\52\1\4"+
    "\4\0\1\20\1\0\11\20\2\0\3\20\2\0\2\20"+
    "\12\0\3\20\1\115\6\20\7\0\1\20\1\0\11\20"+
    "\2\0\3\20\2\0\2\20\12\0\6\20\1\116\3\20"+
    "\7\0\1\20\1\0\11\20\2\0\3\20\2\0\2\20"+
    "\12\0\7\20\1\117\2\20\7\0\1\20\1\0\11\20"+
    "\2\0\3\20\2\0\2\20\12\0\3\20\1\120\6\20"+
    "\7\0\1\20\1\0\11\20\2\0\3\20\2\0\2\20"+
    "\12\0\3\20\1\121\6\20\12\0\1\122\2\0\1\122"+
    "\6\0\1\122\41\0\1\122\1\0\6\122\5\0\1\122"+
    "\41\0\1\123\1\0\6\123\5\0\1\123\41\0\1\123"+
    "\4\0\1\123\51\0\1\124\1\0\6\124\5\0\1\124"+
    "\41\0\1\124\4\0\1\124\45\0\1\125\1\0\2\125"+
    "\1\126\1\125\6\126\5\125\1\126\36\125\1\0\2\125"+
    "\1\127\1\125\6\127\5\125\1\127\36\125\1\0\56\125"+
    "\1\0\2\125\1\126\1\125\1\126\1\127\2\126\1\130"+
    "\1\126\5\125\1\127\35\125\14\0\3\131\3\0\2\131"+
    "\2\0\1\131\13\0\12\131\7\0\1\20\1\0\11\20"+
    "\2\0\3\20\2\0\2\20\12\0\2\20\1\132\7\20"+
    "\7\0\1\20\1\0\11\20\2\0\3\20\2\0\2\20"+
    "\12\0\3\20\1\133\6\20\7\0\1\20\1\0\11\20"+
    "\2\0\3\20\2\0\1\20\1\134\12\0\12\20\17\0"+
    "\1\135\60\0\1\135\44\0\1\136\1\0\3\137\1\140"+
    "\1\137\1\141\5\0\1\137\35\0\1\125\1\0\2\125"+
    "\1\142\1\125\6\142\5\125\1\142\36\125\1\0\2\125"+
    "\1\143\1\125\5\144\1\143\5\125\1\144\36\125\1\0"+
    "\2\125\1\142\1\125\1\142\1\144\4\142\5\125\1\144"+
    "\35\125\4\0\1\145\1\0\1\146\2\147\1\0\1\146"+
    "\1\150\3\114\1\0\1\151\1\146\2\114\2\0\1\114"+
    "\13\0\12\114\7\0\1\20\1\0\11\20\2\0\3\20"+
    "\2\0\2\20\12\0\5\20\1\152\4\20\7\0\1\20"+
    "\1\0\11\20\2\0\3\20\2\0\2\20\12\0\1\153"+
    "\3\20\1\154\5\20\20\0\1\123\41\0\1\155\1\0"+
    "\2\155\1\156\1\155\6\156\5\155\1\156\36\155\1\0"+
    "\2\155\1\157\1\155\6\157\5\155\1\157\36\155\1\0"+
    "\56\155\1\0\2\155\1\156\1\155\1\156\1\157\2\156"+
    "\1\160\1\156\5\155\1\157\35\155\1\161\1\0\2\161"+
    "\1\162\1\161\5\163\1\162\5\161\1\163\35\161\1\155"+
    "\1\0\2\155\1\164\1\155\5\156\1\165\5\155\1\156"+
    "\36\155\1\0\2\155\1\164\1\155\3\156\1\157\1\156"+
    "\1\165\5\155\1\156\35\155\4\0\1\146\1\0\1\146"+
    "\3\147\1\146\1\147\5\0\1\146\1\166\1\0\1\167"+
    "\36\0\1\170\1\0\1\170\3\0\1\170\6\0\1\170"+
    "\1\166\1\0\1\167\36\0\1\170\1\0\1\170\3\0"+
    "\1\170\6\0\1\170\41\0\1\146\1\0\1\146\1\0"+
    "\2\147\1\171\1\147\5\0\1\170\41\0\1\170\1\0"+
    "\1\172\3\0\1\170\6\0\1\170\41\0\1\20\1\0"+
    "\11\20\2\0\3\20\2\0\2\20\12\0\1\173\11\20"+
    "\7\0\1\20\1\0\11\20\2\0\3\20\2\0\2\20"+
    "\12\0\1\20\1\174\10\20\7\0\1\20\1\0\11\20"+
    "\2\0\3\20\2\0\2\20\12\0\5\20\1\175\4\20"+
    "\7\0\1\176\1\0\3\177\1\200\1\177\1\201\5\0"+
    "\1\177\35\0\1\155\1\0\2\155\1\202\1\155\6\202"+
    "\5\155\1\202\36\155\1\0\2\155\1\203\1\155\5\204"+
    "\1\203\5\155\1\204\36\155\1\0\2\155\1\202\1\155"+
    "\1\202\1\204\4\202\5\155\1\204\35\155\4\0\1\205"+
    "\1\0\3\206\1\207\1\206\1\210\5\0\1\206\35\0"+
    "\1\155\1\0\2\155\1\205\1\155\5\206\1\210\5\155"+
    "\1\206\36\155\1\0\2\155\1\205\1\155\3\206\1\202"+
    "\1\206\1\210\5\155\1\206\36\155\1\0\2\155\1\206"+
    "\1\155\6\206\5\155\1\206\36\155\1\0\2\155\1\206"+
    "\1\155\1\206\1\202\2\206\1\211\1\206\5\155\1\202"+
    "\35\155\23\0\1\212\57\0\1\213\54\0\1\166\1\0"+
    "\1\167\36\0\1\170\1\0\1\170\13\0\1\166\1\0"+
    "\1\167\36\0\1\170\1\0\1\170\3\0\1\170\7\0"+
    "\1\166\1\0\1\167\36\0\1\20\1\0\11\20\2\0"+
    "\3\20\2\0\2\20\12\0\3\20\1\214\6\20\7\0"+
    "\1\20\1\0\11\20\2\0\3\20\2\0\2\20\12\0"+
    "\2\20\1\215\7\20\7\0\1\20\1\0\11\20\2\0"+
    "\3\20\2\0\2\20\12\0\6\20\1\216\3\20\3\0"+
    "\1\217\1\0\2\217\1\220\1\217\6\220\5\217\1\220"+
    "\36\217\1\0\2\217\1\221\1\217\6\221\5\217\1\221"+
    "\36\217\1\0\56\217\1\0\2\217\1\220\1\217\1\220"+
    "\1\221\2\220\1\222\1\220\5\217\1\221\35\217\1\223"+
    "\1\0\2\223\1\224\1\223\5\225\1\224\5\223\1\225"+
    "\35\223\1\217\1\0\2\217\1\226\1\217\5\220\1\227"+
    "\5\217\1\220\36\217\1\0\2\217\1\226\1\217\3\220"+
    "\1\221\1\220\1\227\5\217\1\220\35\217\1\223\1\0"+
    "\2\223\1\230\1\223\6\230\5\223\1\230\36\223\1\0"+
    "\2\223\1\231\1\223\6\231\5\223\1\231\36\223\1\0"+
    "\56\223\1\0\2\223\1\230\1\223\1\230\1\231\2\230"+
    "\1\232\1\230\5\223\1\231\36\223\1\0\2\223\1\231"+
    "\1\223\1\231\1\225\4\231\5\223\1\225\35\223\22\0"+
    "\1\233\1\166\57\0\1\234\36\0\1\20\1\0\11\20"+
    "\2\0\3\20\2\0\2\20\12\0\3\20\1\235\6\20"+
    "\7\0\1\20\1\0\11\20\2\0\3\20\2\0\2\20"+
    "\12\0\7\20\1\236\2\20\7\0\1\237\1\0\3\240"+
    "\1\241\1\240\1\242\5\0\1\240\35\0\1\217\1\0"+
    "\2\217\1\243\1\217\6\243\5\217\1\243\36\217\1\0"+
    "\2\217\1\244\1\217\5\245\1\244\5\217\1\245\36\217"+
    "\1\0\2\217\1\243\1\217\1\243\1\245\4\243\5\217"+
    "\1\245\35\217\4\0\1\246\1\0\3\247\1\250\1\247"+
    "\1\251\5\0\1\247\35\0\1\217\1\0\2\217\1\246"+
    "\1\217\5\247\1\251\5\217\1\247\36\217\1\0\2\217"+
    "\1\246\1\217\3\247\1\243\1\247\1\251\5\217\1\247"+
    "\36\217\1\0\2\217\1\247\1\217\6\247\5\217\1\247"+
    "\36\217\1\0\2\217\1\247\1\217\1\247\1\243\2\247"+
    "\1\252\1\247\5\217\1\243\35\217\1\223\1\0\2\223"+
    "\1\253\1\223\6\253\5\223\1\253\36\223\1\0\2\223"+
    "\1\254\1\223\5\255\1\254\5\223\1\255\36\223\1\0"+
    "\2\223\1\253\1\223\1\253\1\255\4\253\5\223\1\255"+
    "\35\223\24\0\1\256\36\0\1\20\1\0\11\20\2\0"+
    "\3\20\2\0\2\20\12\0\3\20\1\257\6\20\7\0"+
    "\1\240\1\0\6\240\5\0\1\240\41\0\1\241\1\0"+
    "\6\241\5\0\1\241\41\0\1\240\1\0\1\240\1\241"+
    "\2\240\1\260\1\240\5\0\1\241\41\0\1\237\1\0"+
    "\5\240\1\242\5\0\1\240\41\0\1\241\1\0\1\241"+
    "\1\0\4\241\43\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6533];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\6\1\1\11\5\1\2\11\2\1\1\11"+
    "\1\1\5\11\5\1\1\11\7\0\1\11\1\0\3\1"+
    "\3\11\5\1\7\0\5\1\13\0\6\1\1\11\6\0"+
    "\3\1\10\0\2\1\3\0\3\1\13\0\6\1\16\0"+
    "\3\1\14\0\1\11\1\0\4\1\1\11\17\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  private static final boolean _DEBUG = false;

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);

  }
  private Symbol plrs(int type, String message){
    if(_DEBUG){
      System.out.println(message + " " + yytext());
    }
    return symbol(type);
  }
  private Symbol plrs(int type, Object value, String message){
    if(_DEBUG){
      System.out.println(message + " " + yytext());
    }
    return symbol(type, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 140) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 17: 
          { return plrs(sym.AND, "AND");
          }
        case 29: break;
        case 23: 
          { return plrs(sym.FALSE, new Boolean(false), "FALSE");
          }
        case 30: break;
        case 22: 
          { return plrs(sym.TK1, "TK1");
          }
        case 31: break;
        case 9: 
          { return plrs(sym.EQ, "EQ");
          }
        case 32: break;
        case 12: 
          { return plrs(sym.RC, "RC");
          }
        case 33: break;
        case 28: 
          { return plrs(sym.CF, "CF");
          }
        case 34: break;
        case 21: 
          { return plrs(sym.SV, "SV");
          }
        case 35: break;
        case 11: 
          { return plrs(sym.RO, "RO");
          }
        case 36: break;
        case 13: 
          { return plrs(sym.SO, "SO");
          }
        case 37: break;
        case 26: 
          { return plrs(sym.CT, "CT");
          }
        case 38: break;
        case 5: 
          { return plrs(sym.VAR, new String(yytext()), "VAR");
          }
        case 39: break;
        case 7: 
          { return plrs(sym.STAR, "STAR");
          }
        case 40: break;
        case 18: 
          { return plrs(sym.OR, "OR");
          }
        case 41: break;
        case 15: 
          { return plrs(sym.CM, "CM");
          }
        case 42: break;
        case 8: 
          { return plrs(sym.NOT, "NOT");
          }
        case 43: break;
        case 27: 
          { return plrs(sym.TK2, "TK2");
          }
        case 44: break;
        case 6: 
          { return plrs(sym.MINUS, "MINUS");
          }
        case 45: break;
        case 14: 
          { return plrs(sym.SC, "SC");
          }
        case 46: break;
        case 2: 
          { ;
          }
        case 47: break;
        case 10: 
          { return plrs(sym.PLUS, "PLUS");
          }
        case 48: break;
        case 25: 
          { return plrs(sym.EV, "EV");
          }
        case 49: break;
        case 20: 
          { return plrs(sym.TRUE, new Boolean(true), "TRUE");
          }
        case 50: break;
        case 24: 
          { return plrs(sym.TK3, "TK3");
          }
        case 51: break;
        case 3: 
          { return plrs(sym.S, "S");
          }
        case 52: break;
        case 16: 
          { yybegin(prog); return plrs(sym.SEP, "SEP");
          }
        case 53: break;
        case 4: 
          { return plrs(sym.INT, new Integer(yytext()), "INT");
          }
        case 54: break;
        case 1: 
          { System.out.println("SCANNER ERROR: " + yytext());
          }
        case 55: break;
        case 19: 
          { return plrs(sym.EQUAL, "EQUAL");
          }
        case 56: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java scanner <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        scanner scanner = null;
        try {
          scanner = new scanner( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
