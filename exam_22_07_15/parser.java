
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sat Jul 01 09:53:35 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.io.*;

/** CUP v0.10k generated parser.
  * @version Sat Jul 01 09:53:35 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\003\005\000\002\011" +
    "\011\000\002\014\003\000\002\014\003\000\002\012\002" +
    "\000\002\012\005\000\002\013\002\000\002\013\005\000" +
    "\002\016\005\000\002\016\006\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\005\005\000\002\006" +
    "\010\000\002\007\005\000\002\017\007\000\002\017\005" +
    "\000\002\017\013\000\002\017\011\000\002\004\005\000" +
    "\002\004\005\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\010" +
    "\002\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\010\027\ufffc\030\ufffa\031\ufffc\001\002\000" +
    "\010\030\117\031\ufffd\032\ufffd\001\002\000\010\027\115" +
    "\031\ufffe\032\ufffe\001\002\000\004\002\114\001\002\000" +
    "\004\032\017\001\002\000\004\031\011\001\002\000\004" +
    "\006\012\001\002\000\010\027\ufffc\030\ufffa\031\ufffc\001" +
    "\002\000\004\031\014\001\002\000\004\006\015\001\002" +
    "\000\010\027\ufffc\030\ufffa\032\ufffc\001\002\000\004\032" +
    "\uffff\001\002\000\010\023\026\025\024\026\022\001\002" +
    "\000\010\023\026\025\024\026\022\001\002\000\004\002" +
    "\000\001\002\000\004\034\065\001\002\000\012\002\ufff5" +
    "\023\ufff5\025\ufff5\026\ufff5\001\002\000\026\007\030\013" +
    "\uffe5\014\031\015\uffe5\016\uffe5\021\040\033\032\034\036" +
    "\035\035\036\037\001\002\000\012\002\ufff4\023\ufff4\025" +
    "\ufff4\026\ufff4\001\002\000\026\007\030\013\uffe5\014\031" +
    "\015\uffe5\016\uffe5\021\040\033\032\034\036\035\035\036" +
    "\037\001\002\000\012\002\ufff6\023\ufff6\025\ufff6\026\ufff6" +
    "\001\002\000\016\007\030\010\uffe5\013\uffe5\014\031\015" +
    "\uffe5\033\032\001\002\000\004\033\055\001\002\000\022" +
    "\005\uffe1\006\uffe1\010\uffe1\013\uffe1\015\uffe1\016\uffe1\017" +
    "\uffe1\020\uffe1\001\002\000\010\013\050\015\047\016\051" +
    "\001\002\000\010\006\046\017\042\020\043\001\002\000" +
    "\012\005\uffe8\006\uffe8\017\uffe8\020\uffe8\001\002\000\012" +
    "\005\uffe9\006\uffe9\017\uffe9\020\uffe9\001\002\000\012\005" +
    "\uffe7\006\uffe7\017\uffe7\020\uffe7\001\002\000\026\007\030" +
    "\013\uffe5\014\031\015\uffe5\016\uffe5\021\040\033\032\034" +
    "\036\035\035\036\037\001\002\000\012\005\uffea\006\uffea" +
    "\017\uffea\020\uffea\001\002\000\026\007\030\013\uffe5\014" +
    "\031\015\uffe5\016\uffe5\021\040\033\032\034\036\035\035" +
    "\036\037\001\002\000\026\007\030\013\uffe5\014\031\015" +
    "\uffe5\016\uffe5\021\040\033\032\034\036\035\035\036\037" +
    "\001\002\000\012\005\uffeb\006\uffeb\017\042\020\uffeb\001" +
    "\002\000\012\005\uffec\006\uffec\017\uffec\020\uffec\001\002" +
    "\000\012\002\ufff3\023\ufff3\025\ufff3\026\ufff3\001\002\000" +
    "\030\005\uffe5\006\uffe5\007\030\010\uffe5\013\uffe5\014\031" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\033\032\001\002\000" +
    "\030\005\uffe5\006\uffe5\007\030\010\uffe5\013\uffe5\014\031" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\033\032\001\002\000" +
    "\024\005\uffe5\006\uffe5\007\030\013\uffe5\014\031\015\uffe5" +
    "\017\uffe5\020\uffe5\033\032\001\002\000\016\005\uffe6\006" +
    "\uffe6\013\050\015\047\017\uffe6\020\uffe6\001\002\000\022" +
    "\005\uffe4\006\uffe4\010\uffe4\013\uffe4\015\047\016\uffe4\017" +
    "\uffe4\020\uffe4\001\002\000\022\005\uffe3\006\uffe3\010\uffe3" +
    "\013\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\001\002\000" +
    "\022\005\uffe0\006\uffe0\010\uffe0\013\uffe0\015\uffe0\016\uffe0" +
    "\017\uffe0\020\uffe0\001\002\000\010\010\057\013\050\015" +
    "\047\001\002\000\022\005\uffe2\006\uffe2\010\uffe2\013\uffe2" +
    "\015\uffe2\016\uffe2\017\uffe2\020\uffe2\001\002\000\010\005" +
    "\061\017\042\020\043\001\002\000\004\024\062\001\002" +
    "\000\026\007\030\013\uffe5\014\031\015\uffe5\016\uffe5\021" +
    "\040\033\032\034\036\035\035\036\037\001\002\000\010" +
    "\006\064\017\042\020\043\001\002\000\012\002\ufff2\023" +
    "\ufff2\025\ufff2\026\ufff2\001\002\000\004\022\101\001\002" +
    "\000\006\005\067\006\070\001\002\000\004\034\071\001" +
    "\002\000\012\002\ufff1\023\ufff1\025\ufff1\026\ufff1\001\002" +
    "\000\004\022\072\001\002\000\026\007\030\013\uffe5\014" +
    "\031\015\uffe5\016\uffe5\021\040\033\032\034\074\035\035" +
    "\036\037\001\002\000\012\005\ufff0\006\ufff0\017\042\020" +
    "\043\001\002\000\014\005\uffe9\006\uffe9\011\075\017\uffe9" +
    "\020\uffe9\001\002\000\004\014\076\001\002\000\004\033" +
    "\077\001\002\000\004\012\100\001\002\000\006\005\uffee" +
    "\006\uffee\001\002\000\026\007\030\013\uffe5\014\031\015" +
    "\uffe5\016\uffe5\021\040\033\032\034\103\035\035\036\037" +
    "\001\002\000\012\005\uffef\006\uffef\017\042\020\043\001" +
    "\002\000\014\005\uffe9\006\uffe9\011\104\017\uffe9\020\uffe9" +
    "\001\002\000\004\014\105\001\002\000\004\033\106\001" +
    "\002\000\004\012\107\001\002\000\006\005\uffed\006\uffed" +
    "\001\002\000\010\023\026\025\024\026\022\001\002\000" +
    "\010\023\026\025\024\026\022\001\002\000\004\002\ufff8" +
    "\001\002\000\012\002\ufff7\023\026\025\024\026\022\001" +
    "\002\000\004\002\001\001\002\000\004\006\116\001\002" +
    "\000\010\027\ufffb\031\ufffb\032\ufffb\001\002\000\004\006" +
    "\120\001\002\000\010\030\ufff9\031\ufff9\032\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\014\003\005\011\006\012\004\013\003\014" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\004\013\003\014\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\004\013\003\014" +
    "\015\001\001\000\002\001\001\000\014\005\026\006\022" +
    "\007\024\015\017\016\020\001\001\000\012\005\026\006" +
    "\022\007\024\015\107\001\001\000\002\001\001\000\004" +
    "\017\065\001\001\000\002\001\001\000\006\004\057\010" +
    "\032\001\001\000\002\001\001\000\006\004\033\010\032" +
    "\001\001\000\002\001\001\000\004\010\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\040\010\032\001\001\000\002\001\001" +
    "\000\006\004\044\010\032\001\001\000\006\004\043\010" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\053\001\001\000\004\010\052\001" +
    "\001\000\004\010\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\062\010\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\072\010\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\101\010\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\005\026" +
    "\006\022\007\024\015\110\016\111\001\001\000\012\005" +
    "\026\006\022\007\024\015\112\001\001\000\002\001\001" +
    "\000\014\005\026\006\022\007\024\015\110\016\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



  // ****** HASHMAP EXAMPLE ****** METHODS: put, get, entrySet
  public HashMap<String, Boolean> vars = new HashMap<String, Boolean>();
  // ****** HASHMAP EXAMPLE ****** METHODS: add, get
  public ArrayList<String> dummy2 = new ArrayList<String>();

  public int getLine() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).left+1;
      }else return -1;
  }
  // Return the column number of actual symbol
  public int getColumn() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).right+1;
      }else return -1;
  }

  public Object stack ( int position){
    // returns the object at the specified position // from the top (tos) of the stack
    return(((Symbol)stack.elementAt(tos+position)).value);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    // print line
    void Pl(String s){
      System.out.println(s);
      return;
    }
    // print
    void P(String s){
      System.out.print(s);
      return;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // int_exp ::= MINUS INT 
            { parser.Tree.reduce(2,"int_exp",0);
              Integer RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = -a; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*int_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // int_exp ::= INT 
            { parser.Tree.reduce(1,"int_exp",0);
              Integer RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*int_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // int_exp ::= RO int_exp RC 
            { parser.Tree.reduce(3,"int_exp",0);
              Integer RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = a; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*int_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // int_exp ::= int_exp STAR int_exp 
            { parser.Tree.reduce(3,"int_exp",0);
              Integer RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a * b; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*int_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // int_exp ::= int_exp PLUS int_exp 
            { parser.Tree.reduce(3,"int_exp",0);
              Integer RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = a + b; 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*int_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // int_exp ::= 
            { parser.Tree.reduce(0,"int_exp",0);
              Integer RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*int_exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= int_exp EQUAL int_exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (a.equals(b)); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= FALSE 
            { parser.Tree.reduce(1,"exp",0);
              Boolean RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= TRUE 
            { parser.Tree.reduce(1,"exp",0);
              Boolean RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean v = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= VAR 
            { parser.Tree.reduce(1,"exp",0);
              Boolean RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = parser.vars.get(v); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= NOT exp 
            { parser.Tree.reduce(2,"exp",0);
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = !a; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp OR exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (a || b); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= exp AND exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = (a && b); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assignment_l ::= VAR EQ VAR SO MINUS INT SC 
            { parser.Tree.reduce(7,"assignment_l",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                int base = 7;
                Integer position =  (base + i);
                parser.vars.put(v, (Boolean)parser.stack(-position));
                //Pl(v + " = " + (Boolean)parser.stack(-position));
                
              CUP$parser$result = new java_cup.runtime.Symbol(13/*assignment_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // assignment_l ::= assignment_l CM VAR EQ VAR SO MINUS INT SC 
            { parser.Tree.reduce(9,"assignment_l",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                int base = 9;
                Integer position =  (base + i);
                parser.vars.put(v, (Boolean)parser.stack(-position));
                //Pl(v + " = " + (Boolean)parser.stack(-position));
                
              CUP$parser$result = new java_cup.runtime.Symbol(13/*assignment_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assignment_l ::= VAR EQ exp 
            { parser.Tree.reduce(3,"assignment_l",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                  parser.vars.put(v, e);
                  //Pl(v + " = " + e.toString());
                  
              CUP$parser$result = new java_cup.runtime.Symbol(13/*assignment_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // assignment_l ::= assignment_l CM VAR EQ exp 
            { parser.Tree.reduce(5,"assignment_l",0);
              Object RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      parser.vars.put(v, e);
                      //Pl(v + " = " + e.toString());
                      
              CUP$parser$result = new java_cup.runtime.Symbol(13/*assignment_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // save ::= SV assignment_l S 
            { parser.Tree.reduce(3,"save",0);
              Boolean RESULT = null;
		 RESULT = new Boolean(false);
                              Pl(RESULT.toString());  
              CUP$parser$result = new java_cup.runtime.Symbol(5/*save*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // case ::= CT exp CM CF exp S 
            { parser.Tree.reduce(6,"case",0);
              Boolean RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Boolean a = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Boolean prev = (Boolean)parser.stack(-6);
                                if(prev == true){
                                  RESULT = a;
                                  Pl(a.toString());
                                  }
                                  else {
                                    RESULT = b;
                                    Pl(b.toString());
                                    } 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*case*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // evaluate ::= EV exp S 
            { parser.Tree.reduce(3,"evaluate",0);
              Boolean RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Pl(e.toString());
                            RESULT = e;
                            
              CUP$parser$result = new java_cup.runtime.Symbol(3/*evaluate*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruction ::= save 
            { parser.Tree.reduce(1,"instruction",0);
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean s = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = s; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruction ::= case 
            { parser.Tree.reduce(1,"instruction",0);
              Object RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = c; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruction ::= evaluate 
            { parser.Tree.reduce(1,"instruction",0);
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = e; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*instruction*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruction_l ::= instruction instruction instruction instruction 
            { parser.Tree.reduce(4,"instruction_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*instruction_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruction_l ::= instruction instruction instruction_l 
            { parser.Tree.reduce(3,"instruction_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*instruction_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tk2_l ::= tk2_l TK2 S 
            { parser.Tree.reduce(3,"tk2_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*tk2_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tk2_l ::= 
            { parser.Tree.reduce(0,"tk2_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(9/*tk2_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tk1_l ::= tk1_l TK1 S 
            { parser.Tree.reduce(3,"tk1_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*tk1_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tk1_l ::= 
            { parser.Tree.reduce(0,"tk1_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*tk1_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // tk1_2 ::= tk2_l 
            { parser.Tree.reduce(1,"tk1_2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*tk1_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // tk1_2 ::= tk1_l 
            { parser.Tree.reduce(1,"tk1_2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*tk1_2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tk1_2 TK3 S tk1_2 TK3 S tk1_2 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(7/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP instruction_l 
            { parser.Tree.reduce(3,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

