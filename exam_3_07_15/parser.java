
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jul 02 15:24:03 CEST 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Arrays;
import java.io.*;
import java.lang.Math.*;

/** CUP v0.10k generated parser.
  * @version Sun Jul 02 15:24:03 CEST 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\003\006\000\002\004" +
    "\003\000\002\004\003\000\002\005\010\000\002\006\007" +
    "\000\002\006\011\000\002\006\015\000\002\007\007\000" +
    "\002\007\010\000\002\010\002\000\002\010\005\000\002" +
    "\017\010\000\002\017\010\000\002\011\005\000\002\011" +
    "\004\000\002\020\002\000\002\021\002\000\002\012\003" +
    "\000\002\012\003\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\016\006\000\002" +
    "\016\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\003\000\002\015\003\000\002\014\013\000\002\014\013" +
    "\000\002\025\006\000\002\025\004\000\002\022\002\000" +
    "\002\023\002\000\002\024\005\000\002\024\005\000\002" +
    "\024\005\000\002\024\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\006\013\007\014\005\001\002\000\006\013" +
    "\141\014\140\001\002\000\004\006\131\001\002\000\004" +
    "\024\ufffe\001\002\000\004\006\124\001\002\000\004\024" +
    "\uffff\001\002\000\004\002\123\001\002\000\004\024\013" +
    "\001\002\000\006\015\014\016\016\001\002\000\004\026" +
    "\116\001\002\000\006\017\ufff0\020\ufff0\001\002\000\004" +
    "\026\017\001\002\000\004\006\020\001\002\000\004\015" +
    "\021\001\002\000\004\026\022\001\002\000\004\006\023" +
    "\001\002\000\006\017\ufff4\020\ufff4\001\002\000\006\017" +
    "\032\020\031\001\002\000\010\002\000\017\ufff1\020\ufff1" +
    "\001\002\000\006\017\032\020\031\001\002\000\010\002" +
    "\uffef\017\uffef\020\uffef\001\002\000\010\002\ufff3\017\ufff3" +
    "\020\ufff3\001\002\000\004\022\064\001\002\000\006\015" +
    "\034\016\035\001\002\000\010\002\uffee\017\uffee\020\uffee" +
    "\001\002\000\006\011\056\012\057\001\002\000\006\011" +
    "\036\012\037\001\002\000\004\021\041\001\002\000\004" +
    "\021\041\001\002\000\004\006\053\001\002\000\004\007" +
    "\042\001\002\000\010\010\045\021\041\026\046\001\002" +
    "\000\006\005\047\010\050\001\002\000\006\005\uffe5\010" +
    "\uffe5\001\002\000\010\005\uffe8\006\uffe8\010\uffe8\001\002" +
    "\000\006\005\uffe4\010\uffe4\001\002\000\006\021\041\026" +
    "\052\001\002\000\010\005\uffe9\006\uffe9\010\uffe9\001\002" +
    "\000\006\005\uffe7\010\uffe7\001\002\000\006\005\uffe6\010" +
    "\uffe6\001\002\000\010\002\uffea\017\uffea\020\uffea\001\002" +
    "\000\004\006\055\001\002\000\010\002\uffeb\017\uffeb\020" +
    "\uffeb\001\002\000\004\021\041\001\002\000\004\021\041" +
    "\001\002\000\004\006\061\001\002\000\010\002\uffec\017" +
    "\uffec\020\uffec\001\002\000\004\006\063\001\002\000\010" +
    "\002\uffed\017\uffed\020\uffed\001\002\000\004\025\065\001" +
    "\002\000\004\023\066\001\002\000\004\025\067\001\002" +
    "\000\006\015\070\016\071\001\002\000\004\004\112\001" +
    "\002\000\004\004\072\001\002\000\006\011\uffde\012\uffde" +
    "\001\002\000\006\011\100\012\102\001\002\000\006\005" +
    "\075\006\076\001\002\000\006\011\uffdf\012\uffdf\001\002" +
    "\000\010\002\uffe2\017\uffe2\020\uffe2\001\002\000\006\011" +
    "\100\012\102\001\002\000\004\026\106\001\002\000\006" +
    "\005\uffe1\006\uffe1\001\002\000\004\026\103\001\002\000" +
    "\006\022\104\023\105\001\002\000\006\005\uffdc\006\uffdc" +
    "\001\002\000\006\005\uffda\006\uffda\001\002\000\006\022" +
    "\107\023\110\001\002\000\006\005\uffdd\006\uffdd\001\002" +
    "\000\006\005\uffdb\006\uffdb\001\002\000\006\005\uffe0\006" +
    "\uffe0\001\002\000\006\011\uffde\012\uffde\001\002\000\006" +
    "\005\075\006\114\001\002\000\010\002\uffe3\017\uffe3\020" +
    "\uffe3\001\002\000\010\002\ufff2\017\ufff2\020\ufff2\001\002" +
    "\000\004\006\117\001\002\000\004\016\120\001\002\000" +
    "\004\026\121\001\002\000\004\006\122\001\002\000\006" +
    "\017\ufff5\020\ufff5\001\002\000\004\002\001\001\002\000" +
    "\004\013\125\001\002\000\004\006\126\001\002\000\004" +
    "\013\127\001\002\000\004\006\130\001\002\000\006\013" +
    "\ufff8\014\ufff8\001\002\000\006\013\ufff7\014\ufff7\001\002" +
    "\000\006\013\134\014\133\001\002\000\004\006\136\001" +
    "\002\000\004\006\135\001\002\000\010\013\ufff6\014\ufff6" +
    "\024\ufff6\001\002\000\006\013\ufff7\024\ufff7\001\002\000" +
    "\006\013\134\024\ufffd\001\002\000\004\006\145\001\002" +
    "\000\004\006\142\001\002\000\004\013\143\001\002\000" +
    "\004\006\144\001\002\000\006\013\ufff9\014\ufff9\001\002" +
    "\000\004\014\146\001\002\000\004\006\147\001\002\000" +
    "\006\014\150\024\ufffc\001\002\000\004\006\151\001\002" +
    "\000\006\014\152\024\ufffb\001\002\000\004\006\153\001" +
    "\002\000\004\014\154\001\002\000\004\006\155\001\002" +
    "\000\004\024\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\153\000\014\003\010\004\011\005\005\006\007\007" +
    "\003\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\014\001\001\000\002" +
    "\001\001\000\006\011\024\021\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\114\013" +
    "\026\014\032\001\001\000\004\020\025\001\001\000\010" +
    "\012\027\013\026\014\032\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\053\001\001\000\004\016\037\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\042\016\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\061\001\001\000" +
    "\004\016\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\023\072\025\073\001" +
    "\001\000\004\024\110\001\001\000\002\001\001\000\004" +
    "\022\076\001\001\000\002\001\001\000\004\024\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\072\025\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\131\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 Tree= new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



  // ****** HASHMAP EXAMPLE ****** METHODS: put, get, entrySet
  public HashMap<String, HashMap<String, Integer>> dummy = new HashMap<String, HashMap<String, Integer>>();
  // ****** HASHMAP EXAMPLE ****** METHODS: add, get
  public ArrayList<String> dummy2 = new ArrayList<String>();

  public int getLine() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).left+1;
      }else return -1;
  }
  // Return the column number of actual symbol
  public int getColumn() {
      if (((Symbol)stack.elementAt(tos)).left != -1){
          return ((Symbol)stack.elementAt(tos)).right+1;
      }else return -1;
  }

  public Object stack ( int position){
    // returns the object at the specified position // from the top (tos) of the stack
    return(((Symbol)stack.elementAt(tos+position)).value);
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    // print line
    void Pl(String s){
      System.out.println(s);
      return;
    }
    // print
    void P(String s){
      System.out.print(s);
      return;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // variation ::= MINUS INT F 
            { parser.Tree.reduce(3,"variation",0);
              Float RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Float[] val = new Float[2];
                    val = (Float[])parser.stack(-3);
                    RESULT = -i * val[1];
                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*variation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // variation ::= PLUS INT F 
            { parser.Tree.reduce(3,"variation",0);
              Float RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Float[] val = new Float[2];
                    val = (Float[])parser.stack(-3);
                    RESULT = i * val[1];
                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*variation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // variation ::= MINUS INT T 
            { parser.Tree.reduce(3,"variation",0);
              Float RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Float[] val = new Float[2];
                    val = (Float[])parser.stack(-3);
                    RESULT = -i * val[0];
                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*variation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // variation ::= PLUS INT T 
            { parser.Tree.reduce(3,"variation",0);
              Float RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Float[] val = new Float[2];
                                val = (Float[])parser.stack(-3);
                                RESULT = i * val[0];
                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*variation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT3 ::= 
            { parser.Tree.reduce(0,"NT3",0);
              Float[] RESULT = null;
		
        RESULT = new Float[2];
        RESULT[0] = (Float)parser.stack(-4);
        RESULT[1] = (Float)parser.stack(-2);
  
              CUP$parser$result = new java_cup.runtime.Symbol(17/*NT3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT2 ::= 
            { parser.Tree.reduce(0,"NT2",0);
              Float[] RESULT = null;
		
        RESULT = new Float[2];
        RESULT[0] = (Float)parser.stack(-6);
        RESULT[1] = (Float)parser.stack(-4);
  
              CUP$parser$result = new java_cup.runtime.Symbol(16/*NT2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // variation_l ::= NT3 variation 
            { parser.Tree.reduce(2,"variation_l",0);
              Float RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float v = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = v;
                                    //Pl(v.toString());
                 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*variation_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // variation_l ::= variation_l CM NT2 variation 
            { parser.Tree.reduce(4,"variation_l",0);
              Float RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Float v = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l = l + v;
                                                    RESULT = l;
                                                    //Pl(v.toString());
                                                    
              CUP$parser$result = new java_cup.runtime.Symbol(19/*variation_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // command2 ::= M2 T FLOAT F FLOAT CLS CL variation_l S 
            { parser.Tree.reduce(9,"command2",0);
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                        Integer[] val = (Integer[])parser.stack(-9);
                                                        //Pl(l.toString());
                                                        val[1] = val[1] + (int)Math.floor(l);
                                                        Pl("oxygen = " + val[0] + " cells = " + val[1]);
                                                                  
              CUP$parser$result = new java_cup.runtime.Symbol(10/*command2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // command2 ::= M2 T FLOAT F FLOAT OX CL variation_l S 
            { parser.Tree.reduce(9,"command2",0);
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Float l = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                            Integer[] val = (Integer[])parser.stack(-9);
                                            //Pl(l.toString());
                                            val[0] = val[0] + (int)Math.floor(l);
                                            Pl("oxygen = " + val[0] + " cells = " + val[1]);
                                                      
              CUP$parser$result = new java_cup.runtime.Symbol(10/*command2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // item_l ::= INT 
            { parser.Tree.reduce(1,"item_l",0);
              Integer RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = i; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*item_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // item_l ::= max_f 
            { parser.Tree.reduce(1,"item_l",0);
              Integer RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = m; 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*item_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // item_l ::= item_l CM INT 
            { parser.Tree.reduce(3,"item_l",0);
              Integer RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Math.max(l,i); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*item_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // item_l ::= item_l CM max_f 
            { parser.Tree.reduce(3,"item_l",0);
              Integer RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = Math.max(l,m); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*item_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // max_f ::= MAX RO RC 
            { parser.Tree.reduce(3,"max_f",0);
              Integer RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*max_f*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // max_f ::= MAX RO item_l RC 
            { parser.Tree.reduce(4,"max_f",0);
              Integer RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer l = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*max_f*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // command1 ::= M1 CLS MINUS max_f S 
            { parser.Tree.reduce(5,"command1",0);
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Integer[] val = (Integer[])parser.stack(-5);
                                                  val[1] = val[1]-m;
                                                  //Pl(Arrays.toString(val));
                                                  Pl("oxygen = " + val[0] + " cells = " + val[1]);
                                                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*command1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command1 ::= M1 CLS PLUS max_f S 
            { parser.Tree.reduce(5,"command1",0);
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Integer[] val = (Integer[])parser.stack(-5);
                                                  val[1] = val[1]+m;
                                                  //Pl(Arrays.toString(val));
                                                  Pl("oxygen = " + val[0] + " cells = " + val[1]);
                                                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*command1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // command1 ::= M1 OX MINUS max_f S 
            { parser.Tree.reduce(5,"command1",0);
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Integer[] val = (Integer[])parser.stack(-5);
                                                  val[0] = val[0]-m;
                                                  //Pl(Arrays.toString(val));
                                                  Pl("oxygen = " + val[0] + " cells = " + val[1]);
                                                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*command1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command1 ::= M1 OX PLUS max_f S 
            { parser.Tree.reduce(5,"command1",0);
              Object RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 Integer[] val = (Integer[])parser.stack(-5);
                                      val[0] = val[0]+m;
                                      //Pl(Arrays.toString(val));
                                      Pl("oxygen = " + val[0] + " cells = " + val[1]);
                                        
              CUP$parser$result = new java_cup.runtime.Symbol(9/*command1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // commands ::= command2 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // commands ::= command1 
            { parser.Tree.reduce(1,"commands",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(8/*commands*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT1 ::= 
            { parser.Tree.reduce(0,"NT1",0);
              Integer[] RESULT = null;
		
        RESULT = new Integer[2];
        RESULT = (Integer[])parser.stack(0);
   
              CUP$parser$result = new java_cup.runtime.Symbol(15/*NT1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT0 ::= 
            { parser.Tree.reduce(0,"NT0",0);
              Integer[] RESULT = null;
		
        RESULT = new Integer[2];
        RESULT = (Integer[])parser.stack(-1);
   
              CUP$parser$result = new java_cup.runtime.Symbol(14/*NT0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // commands_l ::= NT1 commands 
            { parser.Tree.reduce(2,"commands_l",0);
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] n = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                              //Pl(n[0].toString() + " " + n[1].toString());
                              
              CUP$parser$result = new java_cup.runtime.Symbol(7/*commands_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // commands_l ::= commands_l NT0 commands 
            { parser.Tree.reduce(3,"commands_l",0);
              Object RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer[] n = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                //Pl(n[0].toString() + " " + n[1].toString());
                
              CUP$parser$result = new java_cup.runtime.Symbol(7/*commands_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // vars ::= CLS INT S OX INT S 
            { parser.Tree.reduce(6,"vars",0);
              Integer[] RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new Integer[2];
                                RESULT[0] = a;
                                RESULT[1] = b;
                                
              CUP$parser$result = new java_cup.runtime.Symbol(13/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // vars ::= OX INT S CLS INT S 
            { parser.Tree.reduce(6,"vars",0);
              Integer[] RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                RESULT = new Integer[2];
                                RESULT[0] = a;
                                RESULT[1] = b;
                                //Pl(RESULT[0].toString() + " " + RESULT[1].toString());
                                
              CUP$parser$result = new java_cup.runtime.Symbol(13/*vars*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // cd1_l2 ::= cd1_l2 CD1 S 
            { parser.Tree.reduce(3,"cd1_l2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*cd1_l2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // cd1_l2 ::= 
            { parser.Tree.reduce(0,"cd1_l2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(6/*cd1_l2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // cd1_l ::= CD1 S CD1 S CD1 S 
            { parser.Tree.reduce(6,"cd1_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*cd1_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // cd1_l ::= cd1_l CD1 S CD1 S 
            { parser.Tree.reduce(5,"cd1_l",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(5/*cd1_l*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // case1 ::= cd1_l CD2 S CD2 S CD2 S CD2 S CD2 S 
            { parser.Tree.reduce(11,"case1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*case1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // case1 ::= cd1_l CD2 S CD2 S CD2 S 
            { parser.Tree.reduce(7,"case1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*case1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // case1 ::= cd1_l CD2 S CD2 S 
            { parser.Tree.reduce(5,"case1",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*case1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // case2 ::= CD2 S cd1_l2 CD2 S cd1_l2 
            { parser.Tree.reduce(6,"case2",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*case2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= case2 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= case1 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*header*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP vars commands_l 
            { parser.Tree.reduce(4,"prog",1);
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(1/*prog*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

